{"version":3,"file":"index.umd.js","sources":["../src/var/def.js","../src/cmp/clock.js","../src/cmp/ram.js","../src/cmp/buf.js","../src/cmp/bus.js","../src/cmp/cpu.js","../src/cmp/reg.js","../src/cmp/mmu.js","../src/cmp/dec.js","../src/cmp/alu.js","../src/cmp/ivt.js","../src/index.js"],"sourcesContent":["// Constants used as keys to dispatch events\nexport const ON_START_EVENT = \"start\";\nexport const ON_STOP_EVENT = \"stop\";\nexport const ON_PAUSE_EVENT = \"pause\";\nexport const ON_RESUME_EVENT = \"resume\";\nexport const ON_SPEED_CHANGE_EVENT = \"speed-change\";\nexport const ON_RAM_WRITE_EVENT = \"ram-write\";\nexport const ON_RAM_READ_EVENT = \"ram-read\";\nexport const ON_BUFFER_32_WRITE_EVENT = \"buffer-32-write\";\nexport const ON_BUFFER_32_READ_EVENT = \"buffer-32-read\";\nexport const ON_PROC_LOAD = \"on-proc-load\";\nexport const ON_FETCH_CYCLE = \"fetch-cycle\";\nexport const ON_DECODE_CYCLE = \"decode-cycle\";\nexport const ON_EXECUTE_CYCLE = \"execute-cycle\";\nexport const ON_ALU_EXECUTE = \"alu-execute\";\n\n// Constant values that represent the status of an operation\nexport const OK_CODE = 1; // indicates everything went right\nexport const ERROR_CODE = 0; // indicates an error occurred\n\n// Constants used to distinguish between different types of execution\nexport const EXECUTION_KEY = 0b0000000000000000; // indicates normal execution\nexport const INTERRUPT_KEY = 0b0000000100000000; // indicates interrupt execution\n\n// Constants used to identify specific interrupt types\nexport const UNDEFINED_INSTRUCTION_INTERRUPT = INTERRUPT_KEY + 0b00000001; // indicates an undefined instruction interrupt\n\n// Constants used to identify different clock states\nexport const STOP_CLOCK_KEY = 0; // indicates the system is in stop/idle state\nexport const START_CLOCK_KEY = 1; // indicates the system is in start/active state\nexport const PAUSE_CLOCK_KEY = 2; // indicates the system is in pause/suspended state\n\n// Constants used to identify different clock speeds in ms\nexport const FAST_CLOCK_SPEED = 200; // indicates the clock is running at fast speed\nexport const NORMAL_CLOCK_SPEED = 500; // indicates the clock is running at normal speed\nexport const SLOW_CLOCK_SPEED = 1000; // indicates the clock is running at slow speed\n\n// Constants used to set the control bus to different modes\nexport const C_BUS_READ_8_VAL = 0b00000000000000010000000000000000; // sets the control bus to read 8-bit mode\nexport const C_BUS_READ_16_VAL = 0b00000000000000100000000000000000; // sets the control bus to read 16-bit mode\nexport const C_BUS_READ_32_VAL = 0b00000000000000110000000000000000; // sets the control bus to read 32-bit mode\nexport const C_BUS_WRITE_8_VAL = 0b00000000000000000000000100000000; // sets the control bus to write 8-bit mode\nexport const C_BUS_WRITE_16_VAL = 0b00000000000000000000001000000000; // sets the control bus to write 16-bit mode\nexport const C_BUS_WRITE_32_VAL = 0b00000000000000000000001100000000; // sets the control bus to write 32-bit mode\nexport const C_BUS_INTERRUPT_VAL = 0b00000000000000000000000000000001; // sets the control bus to interrupt mode\n\n// Constant used to identify the RAM device\nexport const RAM_DEV_KEY = 0b00000001000000000000000000000000;\n\n// Constant used to specify the size of the RAM in bytes\nexport const RAM_SIZE_IN_BYTE = 0.5 * 1024 * 1024;\n","import {\n  NORMAL_CLOCK_SPEED,\n  PAUSE_CLOCK_KEY,\n  START_CLOCK_KEY,\n  STOP_CLOCK_KEY,\n  ON_STOP_EVENT,\n  ON_START_EVENT,\n  ON_PAUSE_EVENT,\n  ON_RESUME_EVENT,\n  ON_SPEED_CHANGE_EVENT,\n  ON_FETCH_CYCLE,\n  ON_DECODE_CYCLE,\n  ON_EXECUTE_CYCLE,\n} from \"../var/def.js\";\n\n/**\n * Represents a system clock that can be started, stopped, paused, and resumed, and can have its speed changed.\n * It also has observers that can be registered to be notified of different clock cycles.\n * @extends EventTarget\n */\nexport class Clk extends EventTarget {\n  /**\n   * Creates a new Clk object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    /**\n     *The ID of the current interval timer, or null if the clock is not currently running.\n     *@type {?number}\n     */\n    this.TICKER = null;\n\n    /**\n     *The number of clock cycles that have passed since the clock was started.\n     *@type {number}\n     */\n    this.COUNTER = 0;\n\n    /**\n     * The current cycle of the clock.\n     * @type {number}\n     */\n    this.CYCLE = 0;\n\n    /**\n     * @property {Array} CYCLE_EVENTS - A list of constants representing the different cycles in the processor.\n     * @constant\n     * @default\n     */\n    this.CYCLE_EVENTS = [ON_FETCH_CYCLE, ON_DECODE_CYCLE, ON_EXECUTE_CYCLE];\n\n    /**\n     * The current state of the clock.\n     * Can be one of STOP_CLOCK_KEY, START_CLOCK_KEY, or PAUSE_CLOCK_KEY.\n     * @type {number}\n     * @default STOP_CLOCK_KEY\n     */\n    this.STATE = STOP_CLOCK_KEY;\n\n    /**\n     * The current speed of the clock in milliseconds.\n     * Can be any positive number.\n     * @type {number}\n     * @default NORMAL_CLOCK_SPEED\n     */\n    this.SPEED = NORMAL_CLOCK_SPEED;\n\n    this._trigger_observers = this._trigger_observers.bind(this);\n  }\n\n  /**\n   * Starts the system clock.\n   * @fires ON_START_EVENT\n   */\n  start() {\n    if (this.STATE != START_CLOCK_KEY) {\n      this.STATE = START_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_START_EVENT));\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n  }\n\n  /**\n   * Stops the clock, resetting the counter and cycle to their default values, and sets the state to `STOP_CLOCK_KEY`.\n   * If the clock is already stopped, this method does nothing.\n   *\n   * @fires ON_STOP_EVENT when the clock is stopped\n   */\n  stop() {\n    if (this.STATE != STOP_CLOCK_KEY) {\n      clearInterval(this.TICKER);\n      this.CYCLE = 0;\n      this.COUNTER = 0;\n      this.TICKER = null;\n      this.STATE = STOP_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_STOP_EVENT));\n    }\n  }\n\n  /**\n   * Pauses the system clock. If the clock is already paused, this method has no effect.\n   *\n   * @fires ON_PAUSE_EVENT when the clock is paused\n   */\n  pause() {\n    if (this.STATE != PAUSE_CLOCK_KEY) {\n      clearInterval(this.TICKER);\n      this.TICKER = null;\n      this.STATE = PAUSE_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_PAUSE_EVENT));\n    }\n  }\n\n  /**\n   * Resumes the clock if it is currently paused.\n   *\n   * @fires ON_RESUME_EVENTwhen the clock is resumed\n   */\n  resume() {\n    if (this.STATE === PAUSE_CLOCK_KEY) {\n      this.STATE = START_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_RESUME_EVENT));\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n  }\n\n  /**\n   * Changes the speed of the clock.\n   *\n   * @param {number} val - The new speed of the clock, in milliseconds.\n   * @fires ON_SPEED_CHANGE_EVENT the clock speed is changed\n   */\n  changeSpeed(val) {\n    this.SPEED = val;\n    if (this.TICKER) {\n      clearInterval(this.TICKER);\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n    this.dispatchEvent(\n      new CustomEvent(ON_SPEED_CHANGE_EVENT, { detail: this.SPEED })\n    );\n  }\n\n  /**\n   * Triggers all registered observers for the current cycle and updates the counter and cycle state.\n   * @private\n   */\n  _trigger_observers() {\n    // TODO: suspend on visibility change ie user leave current browser tab\n    this.dispatchEvent(new Event(this.CYCLE_EVENTS[this.CYCLE]));\n    if (this.STATE === START_CLOCK_KEY) {\n      this.COUNTER++;\n      this.CYCLE = this.COUNTER % this.CYCLE_EVENTS.length;\n    }\n  }\n}\n","import {\n  OK_CODE,\n  ON_RAM_READ_EVENT,\n  ON_RAM_WRITE_EVENT,\n  RAM_SIZE_IN_BYTE,\n} from \"../var/def.js\";\n\n/**\n * A class representing a memory buffer that can be read and written to.\n * @extends EventTarget\n */\nexport class Ram extends EventTarget {\n  /**\n   * Creates a new Ram object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.START_ADDRESS = 0;\n\n    this.BUFFER = new DataView(\n      new ArrayBuffer(RAM_SIZE_IN_BYTE),\n      this.START_ADDRESS\n    );\n  }\n\n  /**\n   * Reads an 8-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 8-bit value read from the memory buffer.\n   * @fires ON_RAM_READ_EVENT\n   */\n  read8(byteOffset = 0) {\n    const val = this.BUFFER.getUint8(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ_EVENT));\n    return val;\n  }\n\n  /**\n   * Reads a 16-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 16-bit value read from the memory buffer.\n   * @fires ON_RAM_READ_EVENT\n   */\n  read16(byteOffset = 0) {\n    const val = this.BUFFER.getUint16(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ_EVENT));\n    return val;\n  }\n\n  /**\n   * Reads a 32-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 32-bit value read from the memory buffer.\n   * @fires ON_RAM_READ_EVENT\n   */\n  read32(byteOffset = 0) {\n    const val = this.BUFFER.getUint32(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ_EVENT));\n    return val;\n  }\n\n  /**\n   * Writes an 8-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 8-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE_EVENT\n   */\n  write8(val, byteOffset = 0) {\n    this.BUFFER.setUint8(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE_EVENT));\n    return OK_CODE;\n  }\n\n  /**\n   * Writes a 16-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 16-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE_EVENT\n   */\n  write16(val, byteOffset = 0) {\n    this.BUFFER.setUint16(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE_EVENT));\n    return OK_CODE;\n  }\n\n  /**\n   * Writes a 32-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 32-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE_EVENT\n   */\n\n  write32(val, byteOffset = 0) {\n    this.BUFFER.setUint32(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE_EVENT));\n    return OK_CODE;\n  }\n\n  /**\n   * Returns the length of the memory buffer in bytes.\n   * @returns {number} The length of the memory buffer in bytes.\n   */\n  getByteLength() {\n    return this.BUFFER.byteLength;\n  }\n\n  /**\n   * Returns an array containing the binary representation of each byte in the memory buffer.\n   * @returns {string[]} An array containing the binary representation of each byte in the memory buffer.\n   */\n  view() {\n    return [...this];\n  }\n\n  /**\n   * An iterator function that allows the memory buffer to be iterated over with a `for-of` loop.\n   * @returns {Object} An object with a `next` method that returns an object with a `value` property\n   * representing the current byte in the memory buffer as a binary string, and a `done` property\n   * indicating whether the end of the memory buffer has been reached.\n   */\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < RAM_SIZE_IN_BYTE) {\n          const binStr = this.BUFFER.getUint8(index).toString(2);\n          const binStr32 = binStr.padStart(8, \"0\");\n          index++;\n          return { value: binStr32, done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n","import {\n  ERROR_CODE,\n  OK_CODE,\n  ON_BUFFER_32_READ_EVENT,\n  ON_BUFFER_32_WRITE_EVENT,\n} from \"../var/def.js\";\n\n/**\n * A class representing a 32-bit buffer that can be read from and written to.\n * @extends EventTarget\n */\nexport class Buffer32Bit extends EventTarget {\n  /**\n   * Creates a new Buffer32Bit object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.IS_EMPTY = OK_CODE;\n\n    this.BUFFER = new DataView(new ArrayBuffer(4));\n  }\n\n  /**\n   * Reads a 32-bit value from the buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 32-bit value read from the buffer.\n   * @fires ON_BUFFER_32_READ_EVENT\n   */\n  read(byteOffset = 0) {\n    const val = this.BUFFER.getUint32(byteOffset);\n    this.dispatchEvent(new Event(ON_BUFFER_32_READ_EVENT));\n    return val;\n  }\n\n  /**\n   * Writes a 32-bit value to the buffer at the specified byte offset.\n   * @param {number} val - The 32-bit value to write to the buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_BUFFER_32_WRITE_EVENT\n   */\n\n  write(val, byteOffset = 0) {\n    this.BUFFER.setUint32(byteOffset, val);\n    this.IS_EMPTY = ERROR_CODE;\n    this.dispatchEvent(new Event(ON_BUFFER_32_WRITE_EVENT));\n    return OK_CODE;\n  }\n\n  /**\n   * Resets the buffer to all zeros.\n   * @returns {number} The OK_CODE indicating success.\n   */\n\n  flush() {\n    this.BUFFER.setUint32(0, 0);\n    this.IS_EMPTY = OK_CODE;\n    return OK_CODE;\n  }\n\n  /**\n   * Returns a string representation of the binary contents of the buffer.\n   * @returns {string} A string representation of the binary contents of the buffer.\n   */\n  view() {\n    return [...this].join(\"\");\n  }\n\n  /**\n   * An iterator function that allows the buffer to be iterated over with a `for-of` loop.\n   * @returns {Object} An object with a `next` method that returns an object with a `value` property\n   * representing the current bit in the buffer as a binary string, and a `done` property\n   * indicating whether the end of the buffer has been reached.\n   */\n  [Symbol.iterator]() {\n    const binStr = this.BUFFER.getUint32(0).toString(2);\n    const binStr32 = binStr.padStart(32, \"0\");\n    let index = 0;\n    return {\n      next: () => {\n        if (index < binStr32.length) {\n          return { value: binStr32[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n","import {\n  C_BUS_INTERRUPT_VAL,\n  C_BUS_READ_16_VAL,\n  C_BUS_READ_32_VAL,\n  C_BUS_READ_8_VAL,\n  C_BUS_WRITE_16_VAL,\n  C_BUS_WRITE_32_VAL,\n  C_BUS_WRITE_8_VAL,\n  RAM_DEV_KEY,\n} from \"../var/def.js\";\nimport { Buffer32Bit } from \"./buf.js\";\n\n/**\n * Represents a bus system that connects devices and allows them to communicate with each other.\n * It has three buffers for the address, data, and control signals, and can read and write data from and to devices.\n */\nexport class Bus {\n  /**\n   * Creates a new Bus instance.\n   * @param {Object} dev - An object containing the devices connected to the bus.\n   */\n  constructor(dev) {\n    /**\n     * An object containing the devices connected to the bus.\n     * @type {Object}\n     */\n    this.DEVICES = dev;\n\n    /**\n     * The ADDRESS-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.A_BUS_BUFFER = new Buffer32Bit();\n\n    /**\n     * The CONTROL-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.C_BUS_BUFFER = new Buffer32Bit();\n\n    /**\n     * The DATA-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.D_BUS_BUFFER = new Buffer32Bit();\n\n    this.onTick = this.onTick.bind(this);\n  }\n\n  /**\n   * Sets the value of the ADDRESS-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setAddress(val) {\n    // NOTE: first 8bits of address represents the device key\n    this.A_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Sets the value of the CONTROL-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setControl(val) {\n    this.C_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Sets the value of the DATA-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setData(val) {\n    this.D_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Returns the value of the data bus.\n   * @return {number} The value of the data bus.\n   */\n  getData() {\n    const data = this.D_BUS_BUFFER.read();\n    this.D_BUS_BUFFER.flush();\n    return data;\n  }\n\n  /**\n   * Returns the values of the address, data, and control buses.\n   * @return {Object} An object containing the values of the address, data, and control buses.\n   */\n  view() {\n    return {\n      address: this.A_BUS_BUFFER.view(),\n      data: this.D_BUS_BUFFER.view(),\n      control: this.C_BUS_BUFFER.view(),\n    };\n  }\n\n  /**\n   * Handles bus transactions on each tick of the clock.\n   * If the address bus buffer is not empty, it reads the device key and byte offset from the address bus buffer,\n   * then determines the type of bus transaction based on the value in the control bus buffer.\n   * If the transaction is a read operation, it reads the specified number of bytes from the device at the specified byte offset\n   * and writes the data to the data bus buffer.\n   * If the transaction is a write operation, it writes the data in the data bus buffer to the device at the specified byte offset.\n   * If the transaction is an interrupt request, it logs a message indicating that interrupt handling is not yet implemented.\n   * Finally, it flushes the address bus buffer.\n   */\n  onTick() {\n    if (this.A_BUS_BUFFER.IS_EMPTY) return;\n    const device =\n      this.DEVICES[this.A_BUS_BUFFER.read() & ((((1 << 8) - 1) << 24) >>> 0)];\n    const byteOffset = this.A_BUS_BUFFER.read() ^ RAM_DEV_KEY;\n\n    // read data from memory into register\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_8_VAL)) {\n      this.D_BUS_BUFFER.write(device.read8(byteOffset));\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_16_VAL)) {\n      this.D_BUS_BUFFER.write(device.read16(byteOffset));\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_32_VAL)) {\n      this.D_BUS_BUFFER.write(device.read32(byteOffset));\n    }\n\n    // write data from memory into register\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_8_VAL)) {\n      device.write8(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_16_VAL)) {\n      device.write16(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_32_VAL)) {\n      device.write32(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n\n    // handle interrupts\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_INTERRUPT_VAL)) {\n      console.log(\"TODO: handle interrupt signals here\");\n    }\n\n    this.A_BUS_BUFFER.flush();\n  }\n}\n","import {\n  C_BUS_READ_32_VAL,\n  ON_FETCH_CYCLE,\n  ON_DECODE_CYCLE,\n  ON_EXECUTE_CYCLE,\n  EXECUTION_KEY,\n  INTERRUPT_KEY,\n} from \"../var/def.js\";\n\nexport class Cpu {\n  constructor(parts) {\n    this.ALU = parts.alu;\n    this.DEC = parts.dec;\n    this.IVT = parts.ivt;\n    this.BUS = parts.bus;\n    this.REG = parts.reg;\n    this.MMU = parts.mmu;\n    this.CLK = parts.clk;\n\n    this.CURRENT_INSTRUCTION = null;\n    this.HANDLER_CODE = null;\n    this.PROC_START_ADDRESS = 0;\n    this.PROC_BYTE_SIZE = 0;\n    this.STACK_BYTE_SIZE = 0;\n    this.STACK_START_ADDRESS = 0;\n\n    this._fetch = this._fetch.bind(this);\n    this._decode = this._decode.bind(this);\n    this._execute = this._execute.bind(this);\n\n    this.MMU.conn2bus(this.BUS);\n\n    this.CLK.addEventListener(ON_FETCH_CYCLE, this._fetch);\n    this.CLK.addEventListener(ON_DECODE_CYCLE, this._decode);\n    this.CLK.addEventListener(ON_EXECUTE_CYCLE, this._execute);\n\n    this.CLK.addEventListener(ON_FETCH_CYCLE, this.BUS.onTick);\n    this.CLK.addEventListener(ON_DECODE_CYCLE, this.BUS.onTick);\n    this.CLK.addEventListener(ON_EXECUTE_CYCLE, this.BUS.onTick);\n  }\n\n  loadParsedElf(ctx) {\n    this.PROC_BYTE_SIZE = ctx.procSize;\n    this.STACK_BYTE_SIZE = ctx.stackSize;\n    this.PROC_START_ADDRESS = this.MMU.byteAlloc(this.PROC_BYTE_SIZE, 0);\n    this.STACK_START_ADDRESS = this.MMU.byteAlloc(\n      this.STACK_BYTE_SIZE,\n      this.PROC_START_ADDRESS + this.PROC_BYTE_SIZE + 4\n    );\n    this.REG.pc.write(this.PROC_START_ADDRESS);\n    this.REG.sp.write(this.PROC_START_ADDRESS);\n    this.MMU.loadProc(ctx.text);\n    return this;\n  }\n\n  run() {\n    this.CLK.start();\n    return this;\n  }\n\n  _fetch() {\n    if (this.REG.pc.read() < this.PROC_START_ADDRESS + this.PROC_BYTE_SIZE) {\n      const pcRegAddr = this.REG.pc.read();\n      const physicalMemAddr = this.MMU.map2ram(pcRegAddr);\n      this.BUS.setAddress(physicalMemAddr);\n      this.BUS.setControl(C_BUS_READ_32_VAL);\n      this.REG.pc.write(pcRegAddr + 4);\n    } else {\n      this.CLK.stop();\n    }\n  }\n\n  _decode() {\n    this.CURRENT_INSTRUCTION = this.BUS.getData();\n    if (this.CURRENT_INSTRUCTION)\n      this.HANDLER_CODE = this.DEC.decode(this.CURRENT_INSTRUCTION);\n  }\n\n  _execute() {\n    if (this.CURRENT_INSTRUCTION) {\n      const instructionIndex =\n        (this.REG.pc.read() - this.PROC_START_ADDRESS) / 4;\n      const type = this.HANDLER_CODE & ((((1 << 8) - 1) << 8) >>> 0);\n\n      if (!(type ^ INTERRUPT_KEY)) {\n        this.IVT.handle(this.HANDLER_CODE, this.CURRENT_INSTRUCTION);\n      }\n\n      if (!(type ^ EXECUTION_KEY)) {\n        this.ALU.handle(\n          this.HANDLER_CODE,\n          this.CURRENT_INSTRUCTION,\n          instructionIndex\n        );\n      }\n    }\n  }\n}\n","import { Buffer32Bit } from \"./buf.js\";\n\n/**\n * A class representing a set of registers in a processor.\n */\nexport class Reg {\n  /**\n   * Creates a new set of registers.\n   * @constructor\n   */\n  constructor() {\n    this._r0 = new Buffer32Bit();\n    this._r1 = new Buffer32Bit();\n    this._r2 = new Buffer32Bit();\n    this._r3 = new Buffer32Bit();\n    this._r4 = new Buffer32Bit();\n    this._r5 = new Buffer32Bit();\n    this._r6 = new Buffer32Bit();\n    this._r7 = new Buffer32Bit();\n    this._r8 = new Buffer32Bit();\n    this._r9 = new Buffer32Bit();\n    this._r10 = new Buffer32Bit();\n    this._r11 = new Buffer32Bit();\n    this._r12 = new Buffer32Bit();\n    this._r13 = new Buffer32Bit();\n    this._r14 = new Buffer32Bit();\n    this._r15 = new Buffer32Bit();\n    this._cpsr = new Buffer32Bit();\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r0 general-purpose register. Can be used for any purpose.\n   */\n  get r0() {\n    return this._r0;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r1 general-purpose register. Can be used for any purpose.\n   */\n  get r1() {\n    return this._r1;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r2 general-purpose register. Can be used for any purpose.\n   */\n  get r2() {\n    return this._r2;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r3 general-purpose register. Can be used for any purpose.\n   */\n  get r3() {\n    return this._r3;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r4 general-purpose register. Can be used for any purpose.\n   */\n  get r4() {\n    return this._r4;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r5 general-purpose register. Can be used for any purpose.\n   */\n  get r5() {\n    return this._r5;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r6 general-purpose register. Can be used for any purpose.\n   */\n  get r6() {\n    return this._r6;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r7 general-purpose register. Can be used for any purpose.\n   */\n  get r7() {\n    return this._r7;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r8 general-purpose register. Can be used for any purpose.\n   */\n  get r8() {\n    return this._r8;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r9 general-purpose register. Can be used for any purpose.\n   */\n  get r9() {\n    return this._r9;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r10 general-purpose register. Can be used for any purpose.\n   */\n  get r10() {\n    return this._r10;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r11 general-purpose register. Can be used for any purpose.\n   */\n  get r11() {\n    return this._r11;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r12 general-purpose register. Can be used for any purpose.\n   */\n  get r12() {\n    return this._r12;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r13 stack pointer register. Points to the top of the stack.[SP]\n   * @alias sp\n   */\n  get r13() {\n    return this._r13;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r14 link register. Stores the return address for function calls.\n   * @alias lr\n   */\n  get r14() {\n    return this._r14;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r15 program counter register. Stores the address of the current instruction.\n   * @alias pc\n   */\n  get r15() {\n    return this._r15;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r13 stack pointer register. Points to the top of the stack.\n   * @alias sp\n   */\n  get sp() {\n    return this._r13;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r14 link register. Stores the return address for function calls.\n   * @alias lr\n   */\n  get lr() {\n    return this._r14;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r15 program counter register. Stores the address of the current instruction.\n   * @alias pc\n   */\n  get pc() {\n    return this._r15;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The current program status register. Stores the current status of the processor, such as the current processor mode and condition flags.\n   */\n  get cpsr() {\n    return this._cpsr;\n  }\n}\n","import { ON_PROC_LOAD, RAM_DEV_KEY } from \"../var/def.js\";\n\nexport class Mmu extends EventTarget {\n  // virtual memory management unit\n  constructor() {\n    super();\n    this.BUS = null;\n  }\n\n  conn2bus(bus) {\n    this.BUS = bus;\n  }\n\n  map2ram(virtAddr) {\n    //TODO: implement virtual memory mapping tables\n    return RAM_DEV_KEY | virtAddr;\n  }\n\n  byteAlloc(size, offset) {\n    //TODO: implement virtual memory allocation\n    return offset;\n  }\n\n  loadProc(instructions) {\n    const ram = this.BUS.DEVICES[RAM_DEV_KEY];\n    for (\n      let i = 0 + ram.START_ADDRESS,\n        len = instructions.length + ram.START_ADDRESS;\n      i < len;\n      i++\n    ) {\n      ram.write32(instructions[i], 4 * i);\n    }\n    this.dispatchEvent(new Event(ON_PROC_LOAD));\n  }\n}\n","/**\n\nT0 - main encoding\n    T1 - data-processing and miscellaneous instructions\n        T11 - Extra load/store                                                              **\n        T12 - Multiply and Accumulate\n            • MUL/MULS\n        T13 - Synchronization primitives and Load-Acquire/Store-Release                     **\n        T14 - Miscellaneous\n            • BX\n            • CLZ\n        T15 - Halfword Multiply and Accumulate                                              **\n        T16 - Data-processing register (immediate shift)\n\n        T17 - Data-processing register (register shift)\n        \n        T18 - Data-processing immediate  \n            T181 - Integer Data Processing (two register and immediate)\n                • AND, ANDS (immediate)\n                • EOR, EORS (immediate)\n                • SUB, SUBS (immediate) - SUB variant\n                • SUB, SUBS (SP minus immediate) - SUB variant \n                • ADR - A2\n                • SUB, SUBS (immediate) - SUBS variant\n                • SUB, SUBS (SP minus immediate) - SUBS variant \n                • RSB, RSBS (immediate)\n                • ADD, ADDS (immediate) - ADD variant\n                • ADD, ADDS (SP plus immediate) - ADD variant \n                • ADR - A1\n                • ADD, ADDS (immediate) - ADDS variant\n                • ADD, ADDS (SP plus immediate) - ADDS variant\n                • ADC, ADCS (immediate)\n                • SBC, SBCS (immediate)\n                • RSC, RSCS (immediate)\n            T182 - Move Halfword (immediate) \n                • MOV, MOVS (immediate)\n                • MOVT\n            T183 - Move Special Register and Hints (immediate)                              **\n            T184 - Integer Test and Compare (one register and immediate) \n                • TST (immediate)\n                • TEQ (immediate)\n                • CMP (immediate)\n                • CMN (immediate)\n            T185 - Logical Arithmetic (two register and immediate)\n                • ORR, ORRS (immediate)\n                • MOV, MOVS (immediate)\n                • BIC, BICS (immediate)\n                • MVN, MVNS (immediate)\n\n    T2 - Load/Store Word, Unsigned Byte (immediate, literal)\n        • LDR(literal)\n        • LDR(immediate) - Post index variant\n        • LDR(immediate) - Offset variant\n        • LDRB(literal)\n        • LDRB(immediate) - Post index variant\n        • LDRB(immediate) - Offset variant\n        • STR(immediate) - Pre index variant\n        • STR(immediate) - Post index variant\n        • STR(immediate) - Offset variant\n        • STRB(immediate) - Post index variant\n        • STRB(immediate) - Offset variant\n\n    T3 - Load/Store Word, Unsigned Byte (register)\n        • LDR (register) - Pre-indexed variant\n        • LDR (register) - Post indexed variant\n        • LDRB (register) - Pre indexed variant\n        • LDRB (register) - Post indexed variant\n        • STR (register) - Pre-indexed variant\n        • STR (register) - Post indexed variant\n        • STRB (register) - Pre indexed variant\n        • STRB (register) - Post indexed variant\n\n    T4 - Media instructions                                                                 **\n\n    T5 - Branch, branch with link, and block data transfer\n        T51 - Exception Save/Restore                                                        **\n        T52 - Load/Store Multiple                                                           **\n        T53 - Branch (immediate)\n            • B\n            • BL (immediate)\n            • BLX (immediate)\n\n    T6 - System register access, Advanced SIMD, floating-point, and Supervisor call         **\n\n    T7 - Unconditional instructions                                                         **\n\n */\n\nimport { UNDEFINED_INSTRUCTION_INTERRUPT } from \"../var/def.js\";\n\nexport class Dec {\n  // Machine code decoder\n  constructor() {\n    this.INSTRUCTION = null;\n\n    // prettier-ignore\n    this.T0 = [\n        [[\"_ne\", 0b1111],         [\"_eqC\", \"00x\"],        [\"_any\"],           [\"_lup\", \"_T1\"]],                             // data-processing and miscellaneous instructions\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b010],         [\"_any\"],           [\"_lup\", \"_T2\"]],                             // Load/Store Word, Unsigned Byte (immediate, literal)\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b011],         [\"_eq\", 0b0],       [\"_lup\", \"_T3\"]],                             // Load/Store Word, Unsigned Byte (register)\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b011],         [\"_eq\", 0b1],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // Media instructions\n        [[\"_any\"],                [\"_eqC\", \"10x\"],        [\"_any\"],           [\"_lup\", \"_T5\"]],                             // Branch, branch with link, and block data transfer\n        [[\"_any\"],                [\"_eqC\", \"11x\"],        [\"_any\"],           [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // System register access, Advanced SIMD, floating-point, and Supervisor call\n        [[\"_eq\", 0b1111],         [\"_eqC\", \"0xx\"],        [\"_any\"],           [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // Unconditional instructions\n    ];\n    // prettier-ignore\n    this.T1 = [\n        [[\"_eq\", 0b0],        [\"_any\"],               [\"_eq\", 0b1],       [\"_ne\", 0b00],      [\"_eq\", 0b1],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // Extra load/store \n        [[\"_eq\", 0b0],        [\"_eqC\", \"0xxxx\"],      [\"_eq\", 0b1],       [\"_eq\", 0b00],      [\"_eq\", 0b1],       [\"_lup\", \"_T12\"]],                            // Multiply and Accumulate \n        [[\"_eq\", 0b0],        [\"_eqC\", \"1xxxx\"],      [\"_eq\", 0b1],       [\"_eq\", 0b00],      [\"_eq\", 0b1],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // Synchronization primitives and Load-Acquire/Store-Release \n        [[\"_eq\", 0b0],        [\"_eqC\", \"10xx0\"],      [\"_eq\", 0b0],       [\"_any\"],           [\"_any\"],           [\"_lup\", \"_T14\"]],                            // Miscellaneous \n        [[\"_eq\", 0b0],        [\"_eqC\", \"10xx0\"],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],   // Halfword Multiply and Accumulate  \n        [[\"_eq\", 0b0],        [\"_neC\", \"10xx0\"],      [\"_any\"],           [\"_any\"],           [\"_eq\", 0b0],       [\"_lup\", \"_T16\"]],                            // Data-processing register (immediate shift) \n        [[\"_eq\", 0b0],        [\"_neC\", \"10xx0\"],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b1],       [\"_lup\", \"_T16\"]],                            // Data-processing register (register shift) \n        [[\"_eq\", 0b1],        [\"_any\"],               [\"_any\"],           [\"_any\"],           [\"_any\"],           [\"_lup\", \"_T18\"]],                            // Data-processing immediate  \n    ];\n    // prettier-ignore\n    this.T12 = [\n        // TODO: not all opcodes implemented \n        [[\"_eq\", 0b000],       [\"_any\"],       [\"_ret\", \"MUL_MULS\"]],         // MUL/MULS\n    ]\n    // prettier-ignore\n    this.T14 = [\n      // TODO: not all opcodes implemented\n      [[\"_eq\", 0b01], [\"_eq\", 0b001], [\"_ret\", \"BX\"]], // BX\n      [[\"_eq\", 0b11], [\"_eq\", 0b001], [\"_ret\", \"CLZ\"]], // CLZ\n    ];\n    // prettier-ignore\n    this.T18 = [\n        [[\"_eqC\", \"0x\"],        [\"_any\"],           [\"_lup\", \"_T181\"]],                             // Integer Data Processing (two register and immediate)\n        [[\"_eq\", 0b10],         [\"_eq\", 0b00],      [\"_lup\", \"_T182\"]],                             // Move Halfword (immediate) \n        [[\"_eq\", 0b10],         [\"_eq\", 0b10],      [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],     // Move Special Register and Hints (immediate) \n        [[\"_eq\", 0b10],         [\"_eqC\", \"x1\"],     [\"_lup\", \"_T184\"]],                             // Integer Test and Compare (one register and immediate) \n        [[\"_eq\", 0b11],         [\"_any\"],           [\"_lup\", \"_T185\"]],                             // Logical Arithmetic (two register and immediate)\n    ]\n    // prettier-ignore\n    this.T181 = [\n        [[\"_eq\", 0b000],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"AND_ANDS_IMD\"]],              // AND, ANDS (immediate)\n        [[\"_eq\", 0b001],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"EOR_EORS_IMD\"]],              // EOR, EORS (immediate)\n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_neC\",\"11x1\"],        [\"_ret\", \"SUB_IMD\"]],                   // SUB, SUBS (immediate) - SUB variant\n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_eq\", 0b1101],        [\"_ret\", \"SUB_IMD_SP\"]],                // SUB, SUBS (SP minus immediate) - SUB variant \n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_eq\", 0b1111],        [\"_ret\", \"ADR_A2\"]],                    // ADR - A2\n        [[\"_eq\", 0b010],        [\"_eq\", 0b1],   [\"_ne\", 0b1101],        [\"_ret\", \"SUBS_IMD\"]],                  // SUB, SUBS (immediate) - SUBS variant\n        [[\"_eq\", 0b010],        [\"_eq\", 0b1],   [\"_eq\", 0b1101],        [\"_ret\", \"SUBS_IMD_SP\"]],               // SUB, SUBS (SP minus immediate) - SUBS variant \n        [[\"_eq\", 0b011],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"RSB_RSBS_IMD\"]],              // RSB, RSBS (immediate)\n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_neC\",\"11x1\"],        [\"_ret\", \"ADD_IMD\"]],                   // ADD, ADDS (immediate) - ADD variant\n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_eq\", 0b1101],        [\"_ret\", \"ADD_IMD_SP\"]],                // ADD, ADDS (SP plus immediate) - ADD variant \n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_eq\", 0b1111],        [\"_ret\", \"ADR_A1\"]],                    // ADR - A1\n        [[\"_eq\", 0b100],        [\"_eq\", 0b1],   [\"_ne\", 0b1101],        [\"_ret\", \"ADDS_IMD\"]],                  // ADD, ADDS (immediate) - ADDS variant\n        [[\"_eq\", 0b100],        [\"_eq\", 0b1],   [\"_eq\", 0b1101],        [\"_ret\", \"ADDS_IMD_SP\"]],               // ADD, ADDS (SP plus immediate) - ADDS variant\n        [[\"_eq\", 0b101],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"ADC_ADCS_IMD\"]],              // ADC, ADCS (immediate)\n        [[\"_eq\", 0b110],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"SBC_SBCS_IMD\"]],              // SBC, SBCS (immediate)\n        [[\"_eq\", 0b111],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"RSC_RSCS_IMD\"]],              // RSC, RSCS (immediate)\n    ]\n    // prettier-ignore\n    this.T182 = [\n        [[\"_eq\", 0b0],    [\"_ret\", \"MOV_MOVS_IMD\"]],        // MOV, MOVS (immediate)\n        [[\"_eq\", 0b1],    [\"_ret\", \"MOVT\"]],                // MOVT\n    ]\n    // prettier-ignore\n    this.T184 = [\n        [[\"_eq\", 0b00],    [\"_ret\", \"TST_IMD\"]],         // TST (immediate)\n        [[\"_eq\", 0b01],    [\"_ret\", \"TEQ_IMD\"]],         // TEQ (immediate)\n        [[\"_eq\", 0b10],    [\"_ret\", \"CMP_IMD\"]],         // CMP (immediate)\n        [[\"_eq\", 0b11],    [\"_ret\", \"CMN_IMD\"]],         // CMN (immediate)\n    ]\n    // prettier-ignore\n    this.T185 = [\n        [[\"_eq\", 0b00], [\"_ret\", \"ORR_ORRS_IMD\"]],         // ORR, ORRS (immediate)\n        [[\"_eq\", 0b01], [\"_ret\", \"MOV_MOVS_IMD\"]],         // MOV, MOVS (immediate)\n        [[\"_eq\", 0b10], [\"_ret\", \"BIC_BICS_IMD\"]],         // BIC, BICS (immediate)\n        [[\"_eq\", 0b11], [\"_ret\", \"MVN_MVNS_IMD\"]],         // MVN, MVNS (immediate)\n    ]\n    // prettier-ignore\n    this.T2 = [\n        // TODO: not all opcodes implemented \n        [[\"_ne\", 0b01],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_eq\", 0b1111],        [\"_ret\", \"LDR_LIT\"]],          // LDR(literal)\n        [[\"_eq\", 0b00],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDR_IMD_POST\"]],     // LDR(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDR_IMD_OFST\"]],     // LDR(immediate) - Offset variant\n        [[\"_ne\", 0b01],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_eq\", 0b1111],        [\"_ret\", \"LDRB_LIT\"]],         // LDRB(literal)\n        [[\"_eq\", 0b00],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDRB_IMD_POST\"]],    // LDRB(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDRB_IMD_OFST\"]],    // LDRB(immediate) - Offset variant\n        [[\"_eq\", 0b11],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_PRE\"]],      // STR(immediate) - Pre index variant\n        [[\"_eq\", 0b00],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_POST\"]],     // STR(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_OFST\"]],     // STR(immediate) - Offset variant\n        [[\"_eq\", 0b00],       [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STRB_IMD_POST\"]],    // STRB(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STRB_IMD_OFST\"]],    // STRB(immediate) - Offset variant\n    ];\n    // prettier-ignore\n    this.T3 = [\n        // TODO: not all opcodes implemented \n        [[\"_eq\", 0b1],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b1],       [\"_ret\", \"LDR_REG_PRE\"]],        // LDR (register) - Pre-indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ret\", \"LDR_REG_POST\"]],       // LDR (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b1],       [\"_ret\", \"LDRB_REG_PRE\"]],       // LDRB (register) - Pre indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ret\", \"LDRB_REG_POST\"]],      // LDRB (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", \"STR_REG_PRE\"]],        // STR (register) - Pre-indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_ret\", \"STR_REG_POST\"]],       // STR (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", \"STRB_REG_PRE\"]],       // STRB (register) - Pre indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_ret\", \"STRB_REG_POST\"]],      // STRB (register) - Post indexed variant\n    ];\n    // prettier-ignore\n    this.T5 = [\n        [[\"_eq\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],        // Exception Save/Restore\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", UNDEFINED_INSTRUCTION_INTERRUPT]],        // Load/Store Multiple\n        [[\"any\"],               [\"_eq\", 0b1],       [\"_lup\", \"T53\"]],                                  // Branch (immediate)\n    ]\n    // prettier-ignore\n    this.T53 = [\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", \"B\"]],         // B\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b1],       [\"_ret\", \"BL\"]],        // BL/BLX (immediate)\n        [[\"_eq\", 0b1111],       [\"_any\"],           [\"_ret\", \"BLX\"]],       // BL/BLX (immediate)\n    ]\n  }\n\n  decode(inst) {\n    this.INSTRUCTION = inst;\n    return this._T0();\n  }\n\n  _any() {\n    return true;\n  }\n\n  _lup(fName) {\n    return this[fName].call(this);\n  }\n\n  _ret(code) {\n    return code;\n  }\n\n  _ne(v1, v2) {\n    return !!(v1 ^ v2);\n  }\n\n  _eq(v1, v2) {\n    return !(v1 ^ v2);\n  }\n\n  _neC(v1, v2) {\n    let v2str = v2.toString(2);\n    const v1len = v1.length;\n    while (v2str.length < v1len) {\n      v2str = \"0\" + v2str;\n    }\n    for (let i = 0; i < v1len; i++) {\n      const curV1 = v1[i];\n      const curV2 = v2str[i];\n      if (curV1 == \"x\") continue;\n      if (curV1 != curV2) return true;\n    }\n    return false;\n  }\n\n  _eqC(v1, v2) {\n    let v2str = v2.toString(2);\n    const v1len = v1.length;\n    while (v2str.length < v1len) {\n      v2str = \"0\" + v2str;\n    }\n    for (let i = 0; i < v1len; i++) {\n      const curV1 = v1[i];\n      const curV2 = v2str[i];\n      if (curV1 == \"x\") continue;\n      if (curV1 != curV2) return false;\n    }\n    return true;\n  }\n\n  // TABLE 0\n  _T0() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 3) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 4) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T0.length; i < len; i++) {\n      const entry = this.T0[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [op0_func, op0_v1] = entry[1];\n      const [op1_func, op1_v1] = entry[2];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  // TABLE x\n  _T1() {\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 1) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 20) & (((1 << 5) >>> 0) - 1);\n    const op2 = (this.INSTRUCTION >>> 7) & (((1 << 1) >>> 0) - 1);\n    const op3 = (this.INSTRUCTION >>> 5) & (((1 << 2) >>> 0) - 1);\n    const op4 = (this.INSTRUCTION >>> 4) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T1.length; i < len; i++) {\n      const entry = this.T1[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const [op2_func, op2_v1] = entry[2];\n      const [op3_func, op3_v1] = entry[3];\n      const [op4_func, op4_v1] = entry[4];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n        this[op2_func].call(this, op2_v1, op2),\n        this[op3_func].call(this, op3_v1, op3),\n        this[op4_func].call(this, op4_v1, op4),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T2() {\n    const p = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    const w = (this.INSTRUCTION >>> 21) & (((1 << 1) >>> 0) - 1);\n    const PW = (p << 1) + w;\n    const o2 = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    const o1 = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    const Rn = (this.INSTRUCTION >>> 16) & (((1 << 4) >>> 0) - 1);\n    for (let i = 0, len = this.T2.length; i < len; i++) {\n      const entry = this.T2[i];\n      const [PW_func, PW_v1] = entry[0];\n      const [o2_func, o2_v1] = entry[1];\n      const [o1_func, o1_v1] = entry[2];\n      const [Rn_func, Rn_v1] = entry[3];\n      const fields = [\n        this[PW_func].call(this, PW_v1, PW),\n        this[o2_func].call(this, o2_v1, o2),\n        this[o1_func].call(this, o1_v1, o1),\n        this[Rn_func].call(this, Rn_v1, Rn),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T3() {\n    const P = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    const o2 = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    const W = (this.INSTRUCTION >>> 21) & (((1 << 1) >>> 0) - 1);\n    const o1 = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T3.length; i < len; i++) {\n      const entry = this.T3[i];\n      const [P_func, P_v1] = entry[0];\n      const [o2_func, o2_v1] = entry[1];\n      const [W_func, W_v1] = entry[3];\n      const [o1_func, o1_v1] = entry[2];\n      const fields = [\n        this[P_func].call(this, P_v1, P),\n        this[o2_func].call(this, o2_v1, o2),\n        this[W_func].call(this, W_v1, W),\n        this[o1_func].call(this, o1_v1, o1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T5() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T5.length; i < len; i++) {\n      const entry = this.T5[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [op0_func, op0_v1] = entry[1];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[op0_func].call(this, op0_v1, op0),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  // TABLE - 1x\n  _T12() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 3) >>> 0) - 1);\n    const S = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T12.length; i < len; i++) {\n      const entry = this.T12[i];\n      const [opc_func, opc_v1] = entry[0];\n      const [S_func, S_v1] = entry[1];\n      const fields = [\n        this[opc_func].call(this, opc_v1, opc),\n        this[S_func].call(this, S_v1, S),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T14() {\n    const op0 = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 4) & (((1 << 3) >>> 0) - 1);\n    for (let i = 0, len = this.T14.length; i < len; i++) {\n      const entry = this.T14[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T16() {\n    return \"T16\";\n  }\n\n  _T17() {\n    return \"T17\";\n  }\n\n  _T18() {\n    const op0 = (this.INSTRUCTION >>> 23) & (((1 << 2) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 20) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T18.length; i < len; i++) {\n      const entry = this.T18[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  // TABLE 18x\n  _T181() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 3) >>> 0) - 1);\n    const S = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    const Rn = (this.INSTRUCTION >>> 16) & (((1 << 4) >>> 0) - 1);\n    for (let i = 0, len = this.T181.length; i < len; i++) {\n      const entry = this.T181[i];\n      const [opc_func, opc_v1] = entry[0];\n      const [S_func, S_v1] = entry[1];\n      const [Rn_func, Rn_v1] = entry[2];\n      const fields = [\n        this[opc_func].call(this, opc_v1, opc),\n        this[S_func].call(this, S_v1, S),\n        this[Rn_func].call(this, Rn_v1, Rn),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T182() {\n    const H = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T182.length; i < len; i++) {\n      const entry = this.T182[i];\n      const [H_func, H_v1] = entry[0];\n      const fields = [this[H_func].call(this, H_v1, H)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T184() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T184.length; i < len; i++) {\n      const entry = this.T184[i];\n      const [opc_func, opc_v1] = entry[0];\n      const fields = [this[opc_func].call(this, opc_v1, opc)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  _T185() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T185.length; i < len; i++) {\n      const entry = this.T185[i];\n      const [opc_func, opc_v1] = entry[0];\n      const fields = [this[opc_func].call(this, opc_v1, opc)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n\n  // TABLE 5x\n  _T53() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const H = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T53.length; i < len; i++) {\n      const entry = this.T53[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [H_func, H_v1] = entry[1];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[H_func].call(this, H_v1, H),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return UNDEFINED_INSTRUCTION_INTERRUPT;\n  }\n}\n\nconst INSTRUCTION_SUBSET = [\n  \"ADC\",\n  \"ADD\",\n  \"ADR\",\n  \"AND\",\n  \"ASR\",\n  \"BIC\",\n  \"BL\",\n  \"CMN\",\n  \"CMP\",\n  \"DCD\",\n  \"END\",\n  \"EOR\",\n  \"EQU\",\n  \"FILL\",\n  \"LDM\",\n  \"LDR\",\n  \"LSL\",\n  \"LSR\",\n  \"MOV\",\n  \"MVN\",\n  \"ORR\",\n  \"ROR\",\n  \"RRX\",\n  \"RSB\",\n  \"RSC\",\n  \"SBC\",\n  \"STM\",\n  \"STR\",\n  \"SUB\",\n  \"TEQ\",\n  \"TST\",\n];\n","import { ON_ALU_EXECUTE } from \"../var/def\";\n\nexport class Alu extends EventTarget {\n  constructor() {\n    super();\n  }\n\n  handle(code, inst, index) {\n    console.log(\n      `Execute Opcode - ${code.toString(2)} - ${inst.toString(16)}\\n\\n`\n    );\n    const detail = {\n      code,\n      inst,\n      index,\n      // TODO: calculate checksum from the above three val this way the consumer of the lib can do likewise and compare.\n      // This will become necessary when complex arm instructions involving initialised data is introduced\n      checksum: null,\n    };\n    this.dispatchEvent(new CustomEvent(ON_ALU_EXECUTE, { detail }));\n  }\n}\n","export class Ivt {\n  // interrupt vector table\n  constructor() {}\n\n  handle(code, inst) {\n    console.log(\n      `%c Handle Interrupt - ${code.toString(2)} - ${inst.toString(16)}\\n\\n`,\n      \"background: black; color: white\"\n    );\n  }\n}\n","import * as DEF from \"./var/def.js\";\n\nimport { Clk } from \"./cmp/clock.js\";\nimport { Ram } from \"./cmp/ram.js\";\nimport { Bus } from \"./cmp/bus.js\";\nimport { Cpu } from \"./cmp/cpu.js\";\nimport { Reg } from \"./cmp/reg.js\";\nimport { Mmu } from \"./cmp/mmu.js\";\nimport { Dec } from \"./cmp/dec.js\";\nimport { Alu } from \"./cmp/alu.js\";\nimport { Ivt } from \"./cmp/ivt.js\";\n\nconst ram = new Ram();\nconst reg = new Reg();\nconst mmu = new Mmu();\nconst dec = new Dec();\nconst alu = new Alu();\nconst ivt = new Ivt();\nconst clk = new Clk();\n\nconst bus = new Bus({ [DEF.RAM_DEV_KEY]: ram });\nconst cpu = new Cpu({ bus, reg, mmu, dec, alu, ivt, clk, ram });\n\nexport { DEF, cpu, bus, reg, mmu, dec, alu, ivt, clk, ram };\n"],"names":["ON_START_EVENT","ON_STOP_EVENT","ON_PAUSE_EVENT","ON_RESUME_EVENT","ON_SPEED_CHANGE_EVENT","ON_RAM_WRITE_EVENT","ON_RAM_READ_EVENT","ON_BUFFER_32_WRITE_EVENT","ON_BUFFER_32_READ_EVENT","ON_PROC_LOAD","ON_FETCH_CYCLE","ON_DECODE_CYCLE","ON_EXECUTE_CYCLE","ON_ALU_EXECUTE","OK_CODE","ERROR_CODE","EXECUTION_KEY","INTERRUPT_KEY","UNDEFINED_INSTRUCTION_INTERRUPT","STOP_CLOCK_KEY","START_CLOCK_KEY","PAUSE_CLOCK_KEY","FAST_CLOCK_SPEED","NORMAL_CLOCK_SPEED","SLOW_CLOCK_SPEED","C_BUS_READ_8_VAL","C_BUS_READ_16_VAL","C_BUS_READ_32_VAL","C_BUS_WRITE_8_VAL","C_BUS_WRITE_16_VAL","C_BUS_WRITE_32_VAL","C_BUS_INTERRUPT_VAL","RAM_DEV_KEY","RAM_SIZE_IN_BYTE","Clk","TICKER","COUNTER","CYCLE","CYCLE_EVENTS","STATE","SPEED","_trigger_observers","bind","start","dispatchEvent","Event","setInterval","stop","clearInterval","pause","resume","changeSpeed","val","CustomEvent","detail","length","EventTarget","Ram","START_ADDRESS","BUFFER","DataView","ArrayBuffer","read8","byteOffset","getUint8","read16","getUint16","read32","getUint32","write8","setUint8","write16","setUint16","write32","setUint32","getByteLength","byteLength","view","index","next","binStr","toString","binStr32","padStart","value","done","Symbol","iterator","Buffer32Bit","IS_EMPTY","read","write","flush","join","Bus","dev","DEVICES","A_BUS_BUFFER","C_BUS_BUFFER","D_BUS_BUFFER","onTick","setAddress","setControl","setData","getData","data","address","control","device","console","log","Cpu","parts","ALU","alu","DEC","dec","IVT","ivt","BUS","bus","REG","reg","MMU","mmu","CLK","clk","CURRENT_INSTRUCTION","HANDLER_CODE","PROC_START_ADDRESS","PROC_BYTE_SIZE","STACK_BYTE_SIZE","STACK_START_ADDRESS","_fetch","_decode","_execute","conn2bus","addEventListener","loadParsedElf","ctx","procSize","stackSize","byteAlloc","pc","sp","loadProc","text","run","pcRegAddr","physicalMemAddr","map2ram","decode","instructionIndex","type","handle","Reg","_r0","_r1","_r2","_r3","_r4","_r5","_r6","_r7","_r8","_r9","_r10","_r11","_r12","_r13","_r14","_r15","_cpsr","Mmu","virtAddr","size","offset","instructions","ram","i","len","Dec","INSTRUCTION","T0","T1","T12","T14","T18","T181","T182","T184","T185","T2","T3","T5","T53","inst","_T0","_any","_lup","fName","call","_ret","code","_ne","v1","v2","_eq","_neC","v2str","v1len","curV1","curV2","_eqC","cond","op0","op1","entry","cond_func","cond_v1","op0_func","op0_v1","op1_func","op1_v1","fields","every","v","caller","callee","_T1","op2","op3","op4","op2_func","op2_v1","op3_func","op3_v1","op4_func","op4_v1","_T2","p","w","PW","o2","o1","Rn","PW_func","PW_v1","o2_func","o2_v1","o1_func","o1_v1","Rn_func","Rn_v1","_T3","P","W","P_func","P_v1","W_func","W_v1","_T5","_T12","opc","S","opc_func","opc_v1","S_func","S_v1","_T14","_T16","_T17","_T18","_T181","_T182","H","H_func","H_v1","_T184","_T185","_T53","Alu","checksum","Ivt","DEF","cpu"],"mappings":"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"}