{"version":3,"file":"index.modern.js","sources":["../src/var/def.js","../src/cmp/clock.js","../src/cmp/ram.js","../src/cmp/buf.js","../src/cmp/bus.js","../src/cmp/cpu.js","../src/cmp/reg.js","../src/cmp/proc.js","../src/lib/checksum.js","../src/cmp/mmu.js","../src/cmp/dec.js","../src/cmp/alu.js","../src/index.js"],"sourcesContent":["// Constants used as keys to dispatch events\nexport const ON_START = \"start\";\nexport const ON_STOP = \"stop\";\nexport const ON_PAUSE = \"pause\";\nexport const ON_RESUME = \"resume\";\nexport const ON_STEP = \"step\";\nexport const ON_SPEED_CHANGE = \"speed-change\";\nexport const ON_RAM_WRITE = \"ram-write\";\nexport const ON_RAM_READ = \"ram-read\";\nexport const ON_BUFFER_32_WRITE = \"buffer-32-write\";\nexport const ON_BUFFER_32_READ = \"buffer-32-read\";\nexport const ON_FETCH_CYCLE_START = \"fetch-cycle_start\";\nexport const ON_DECODE_CYCLE_START = \"decode-cycle_start\";\nexport const ON_EXECUTE_CYCLE_START = \"execute-cycle_start\";\nexport const ON_FETCH_CYCLE_END = \"fetch-cycle_end\";\nexport const ON_DECODE_CYCLE_END = \"decode-cycle_end\";\nexport const ON_EXECUTE_CYCLE_END = \"execute-cycle_end\";\nexport const ON_REG_WRITE = \"reg-write\";\nexport const ON_REG_READ = \"reg-read\";\nexport const ON_ALU_EXECUTE = \"alu-execute\";\n\n// Const values that represent the name of the memory section of a process\nexport const ENV_SECTION = \"env-section\";\nexport const STACK_SECTION = \"stack-section\";\nexport const HEAP_SECTION = \"heap-section\";\nexport const BSS_SECTION = \"bss-section\";\nexport const INIT_DATA_SECTION = \"init-data-section\";\nexport const TEXT_SECTION = \"text-section\";\n\n// Constant values that represent the status of an operation\nexport const OK_CODE = 1; // indicates everything went right\nexport const ERROR_CODE = 0; // indicates an error occurred\n\n// Constants used to identify different clock states\nexport const STOP_CLOCK_KEY = 0; // indicates the system is in stop/idle state\nexport const START_CLOCK_KEY = 1; // indicates the system is in start/active state\nexport const PAUSE_CLOCK_KEY = 2; // indicates the system is in pause/suspended state\n\n// Constants used to identify different clock speeds in ms\nexport const FAST_CLOCK_SPEED = 200; // indicates the clock is running at fast speed\nexport const NORMAL_CLOCK_SPEED = 500; // indicates the clock is running at normal speed\nexport const SLOW_CLOCK_SPEED = 1000; // indicates the clock is running at slow speed\n\n// Constants used to set the control bus to different modes\nexport const C_BUS_READ_8_VAL = 0b00000000000000010000000000000000; // sets the control bus to read 8-bit mode\nexport const C_BUS_READ_16_VAL = 0b00000000000000100000000000000000; // sets the control bus to read 16-bit mode\nexport const C_BUS_READ_32_VAL = 0b00000000000000110000000000000000; // sets the control bus to read 32-bit mode\nexport const C_BUS_WRITE_8_VAL = 0b00000000000000000000000100000000; // sets the control bus to write 8-bit mode\nexport const C_BUS_WRITE_16_VAL = 0b00000000000000000000001000000000; // sets the control bus to write 16-bit mode\nexport const C_BUS_WRITE_32_VAL = 0b00000000000000000000001100000000; // sets the control bus to write 32-bit mode\nexport const C_BUS_INTERRUPT_VAL = 0b00000000000000000000000000000001; // sets the control bus to interrupt mode\n\n// Constant used to identify the RAM device\nexport const RAM_DEV_KEY = 0b00000001000000000000000000000000;\n\n// Constant used to specify the size of the RAM in bytes\nexport const RAM_SIZE_IN_BYTE = 0.5 * 1024 * 1024;\n","import {\n  NORMAL_CLOCK_SPEED,\n  PAUSE_CLOCK_KEY,\n  START_CLOCK_KEY,\n  STOP_CLOCK_KEY,\n  ON_STOP,\n  ON_START,\n  ON_PAUSE,\n  ON_RESUME,\n  ON_SPEED_CHANGE,\n  ON_FETCH_CYCLE_START,\n  ON_DECODE_CYCLE_START,\n  ON_EXECUTE_CYCLE_START,\n  ON_FETCH_CYCLE_END,\n  ON_DECODE_CYCLE_END,\n  ON_EXECUTE_CYCLE_END,\n  ON_STEP,\n} from \"../var/def.js\";\n\n/**\n * Represents a system clock that can be started, stopped, paused, and resumed, and can have its speed changed.\n * It also has observers that can be registered to be notified of different clock cycles.\n * @extends EventTarget\n */\nexport class Clk extends EventTarget {\n  /**\n   * Creates a new Clk object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    /**\n     *The ID of the current interval timer, or null if the clock is not currently running.\n     *@type {?number}\n     */\n    this.TICKER = null;\n\n    /**\n     *The current cycle of the clock.\n     *@type {number}\n     */\n    this.CYCLE = 0;\n\n    /**\n     * @property {Array} CYCLE_START_EVENTS - A list of constants representing the different start of cycles in the processor.\n     * @constant\n     * @default\n     */\n    this.CYCLE_START_EVENTS = [\n      ON_FETCH_CYCLE_START,\n      ON_DECODE_CYCLE_START,\n      ON_EXECUTE_CYCLE_START,\n    ];\n\n    /**\n     * @property {Array} CYCLE_END_EVENTS - A list of constants representing the different end of cycles in the processor.\n     * @constant\n     * @default\n     */\n    this.CYCLE_END_EVENTS = [\n      ON_FETCH_CYCLE_END,\n      ON_DECODE_CYCLE_END,\n      ON_EXECUTE_CYCLE_END,\n    ];\n\n    /**\n     * The current state of the clock.\n     * Can be one of STOP_CLOCK_KEY, START_CLOCK_KEY, or PAUSE_CLOCK_KEY.\n     * @type {number}\n     * @default STOP_CLOCK_KEY\n     */\n    this.STATE = STOP_CLOCK_KEY;\n\n    /**\n     * The current speed of the clock in milliseconds.\n     * Can be any positive number.\n     * @type {number}\n     * @default NORMAL_CLOCK_SPEED\n     */\n    this.SPEED = NORMAL_CLOCK_SPEED;\n\n    this._trigger_observers = this._trigger_observers.bind(this);\n  }\n\n  /**\n   * Starts the system clock.\n   * @fires ON_START\n   */\n  start() {\n    if (this.STATE !== START_CLOCK_KEY) {\n      this.STATE = START_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_START));\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n  }\n\n  /**\n   * Stops the clock, resetting the counter and cycle to their default values, and sets the state to `STOP_CLOCK_KEY`.\n   * If the clock is already stopped, this method does nothing.\n   *\n   * @fires ON_STOP when the clock is stopped\n   */\n  stop() {\n    if (this.STATE !== STOP_CLOCK_KEY) {\n      clearInterval(this.TICKER);\n      this.CYCLE = 0;\n      this.CYCLE = 0;\n      this.TICKER = null;\n      this.STATE = STOP_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_STOP));\n    }\n  }\n\n  /**\n   * Pauses the system clock. If the clock is already paused, this method has no effect.\n   *\n   * @fires ON_PAUSE when the clock is paused\n   */\n  pause() {\n    if (this.STATE !== PAUSE_CLOCK_KEY) {\n      clearInterval(this.TICKER);\n      this.TICKER = null;\n      this.STATE = PAUSE_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_PAUSE));\n    }\n  }\n\n  /**\n   * Resumes the clock if it is currently paused.\n   *\n   * @fires ON_RESUME when the clock is resumed\n   */\n  resume() {\n    if (this.STATE === PAUSE_CLOCK_KEY) {\n      this.STATE = START_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_RESUME));\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n  }\n\n  /**\n   * Resumes the clock if it is currently paused and pause it after 3 clocks.\n   *\n   * @fires ON_RESUME when the clock is resumed\n   */\n  step() {\n    if (this.STATE === PAUSE_CLOCK_KEY) {\n      this.STATE = START_CLOCK_KEY;\n      this.dispatchEvent(new Event(ON_STEP));\n      setTimeout(() => {\n        this._trigger_observers();\n        setTimeout(() => {\n          this._trigger_observers();\n          setTimeout(() => {\n            this._trigger_observers();\n            this.pause();\n          }, this.SPEED);\n        }, this.SPEED);\n      }, this.SPEED);\n    }\n  }\n\n  /**\n   * Changes the speed of the clock.\n   *\n   * @param {number} val - The new speed of the clock, in milliseconds.\n   * @fires ON_SPEED_CHANGE the clock speed is changed\n   */\n  changeSpeed(val) {\n    this.SPEED = val;\n    if (this.TICKER) {\n      clearInterval(this.TICKER);\n      this.TICKER = setInterval(this._trigger_observers, this.SPEED);\n    }\n    this.dispatchEvent(\n      new CustomEvent(ON_SPEED_CHANGE, { detail: this.SPEED })\n    );\n  }\n\n  /**\n   * Triggers all registered observers for the current cycle and updates the counter and cycle state.\n   * @private\n   */\n  _trigger_observers() {\n    // TODO: suspend on visibility change ie user leave current browser tab\n    this.dispatchEvent(new Event(this.CYCLE_START_EVENTS[this.CYCLE]));\n    this.dispatchEvent(new Event(this.CYCLE_END_EVENTS[this.CYCLE]));\n    this.CYCLE =\n      this.CYCLE < this.CYCLE_START_EVENTS.length - 1 ? this.CYCLE + 1 : 0;\n  }\n}\n","import {\n  OK_CODE,\n  ON_RAM_READ,\n  ON_RAM_WRITE,\n  RAM_SIZE_IN_BYTE,\n} from \"../var/def.js\";\n\n/**\n * A class representing a memory buffer that can be read and written to.\n * @extends EventTarget\n */\nexport class Ram extends EventTarget {\n  /**\n   * Creates a new Ram object.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this.START_ADDRESS = 0;\n\n    this.BUFFER = new DataView(\n      new ArrayBuffer(RAM_SIZE_IN_BYTE),\n      this.START_ADDRESS\n    );\n  }\n\n  /**\n   * Reads an 8-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 8-bit value read from the memory buffer.\n   * @fires ON_RAM_READ\n   */\n  read8(byteOffset = 0) {\n    const val = this.BUFFER.getUint8(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ));\n    return val;\n  }\n\n  /**\n   * Reads a 16-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 16-bit value read from the memory buffer.\n   * @fires ON_RAM_READ\n   */\n  read16(byteOffset = 0) {\n    const val = this.BUFFER.getUint16(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ));\n    return val;\n  }\n\n  /**\n   * Reads a 32-bit value from the memory buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 32-bit value read from the memory buffer.\n   * @fires ON_RAM_READ\n   */\n  read32(byteOffset = 0) {\n    const val = this.BUFFER.getUint32(byteOffset);\n    this.dispatchEvent(new Event(ON_RAM_READ));\n    return val;\n  }\n\n  /**\n   * Writes an 8-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 8-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE\n   */\n  write8(val, byteOffset = 0) {\n    this.BUFFER.setUint8(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE));\n    return OK_CODE;\n  }\n\n  /**\n   * Writes a 16-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 16-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE\n   */\n  write16(val, byteOffset = 0) {\n    this.BUFFER.setUint16(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE));\n    return OK_CODE;\n  }\n\n  /**\n   * Writes a 32-bit value to the memory buffer at the specified byte offset.\n   * @param {number} val - The 32-bit value to write to the memory buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_RAM_WRITE\n   */\n\n  write32(val, byteOffset = 0) {\n    this.BUFFER.setUint32(byteOffset, val);\n    this.dispatchEvent(new Event(ON_RAM_WRITE));\n    return OK_CODE;\n  }\n\n  /**\n   * Returns the length of the memory buffer in bytes.\n   * @returns {number} The length of the memory buffer in bytes.\n   */\n  getByteLength() {\n    return this.BUFFER.byteLength;\n  }\n\n  /**\n   * Returns an array containing the binary representation of each byte in the memory buffer.\n   * @returns {string[]} An array containing the binary representation of each byte in the memory buffer.\n   */\n  view() {\n    return [...this];\n  }\n\n  /**\n   * An iterator function that allows the memory buffer to be iterated over with a `for-of` loop.\n   * @returns {Object} An object with a `next` method that returns an object with a `value` property\n   * representing the current byte in the memory buffer as a binary string, and a `done` property\n   * indicating whether the end of the memory buffer has been reached.\n   */\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < RAM_SIZE_IN_BYTE) {\n          const binStr = this.BUFFER.getUint8(index).toString(2);\n          const binStr32 = binStr.padStart(8, \"0\");\n          index++;\n          return { value: binStr32, done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n","import {\n  ERROR_CODE,\n  OK_CODE,\n  ON_BUFFER_32_READ,\n  ON_BUFFER_32_WRITE,\n} from \"../var/def.js\";\n\n/**\n * A class representing a 32-bit buffer that can be read from and written to.\n * @extends EventTarget\n */\nexport class Buffer32Bit extends EventTarget {\n  /**\n   * Creates a new Buffer32Bit object.\n   * @param {String} name - A name to identify the buffer by.\n   * @constructor\n   */\n  constructor(name) {\n    super();\n\n    /**\n     * A name to identify the buffer.\n     * @type {String}\n     */\n    this.NAME = name;\n\n    /**\n     * A code indicating whether the buffer is empty.\n     * @type {number}\n     */\n    this.IS_EMPTY = OK_CODE;\n\n    /**\n     * A DataView object representing the buffer.\n     * @type {DataView}\n     */\n    this.BUFFER = new DataView(new ArrayBuffer(4));\n  }\n\n  /**\n   * Reads a 32-bit value from the buffer at the specified byte offset.\n   * @param {number} [byteOffset=0] - The byte offset at which to read the value.\n   * @returns {number} The 32-bit value read from the buffer.\n   * @fires ON_BUFFER_32_READ\n   */\n  read(byteOffset = 0) {\n    const val = this.BUFFER.getUint32(byteOffset);\n    this.dispatchEvent(new CustomEvent(ON_BUFFER_32_READ, { detail: this }));\n    return val;\n  }\n\n  /**\n   * Writes a 32-bit value to the buffer at the specified byte offset.\n   * @param {number} val - The 32-bit value to write to the buffer.\n   * @param {number} [byteOffset=0] - The byte offset at which to write the value.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_BUFFER_32_WRITE\n   */\n  write(val, byteOffset = 0) {\n    this.BUFFER.setUint32(byteOffset, val);\n    this.IS_EMPTY = ERROR_CODE;\n    this.dispatchEvent(new CustomEvent(ON_BUFFER_32_WRITE, { detail: this }));\n    return OK_CODE;\n  }\n\n  /**\n   * Resets the buffer to all zeros.\n   * @returns {number} The OK_CODE indicating success.\n   * @fires ON_BUFFER_32_WRITE\n   */\n  flush() {\n    this.BUFFER.setUint32(0, 0);\n    this.IS_EMPTY = OK_CODE;\n    this.dispatchEvent(new CustomEvent(ON_BUFFER_32_WRITE, { detail: this }));\n    return OK_CODE;\n  }\n\n  /**\n   * Returns a string representation of the binary contents of the buffer.\n   * @returns {string} A string representation of the binary contents of the buffer.\n   */\n  view() {\n    return [...this].join(\"\");\n  }\n\n  /**\n   * An iterator function that allows the buffer to be iterated over with a `for-of` loop.\n   * @returns {Object} An object with a `next` method that returns an object with a `value` property\n   * representing the current bit in the buffer as a binary string, and a `done` property\n   * indicating whether the end of the buffer has been reached.\n   */\n  [Symbol.iterator]() {\n    let index = 0;\n    const binStr = this.BUFFER.getUint32(0).toString(2);\n    const binStr32 = binStr.padStart(32, \"0\");\n    return {\n      next: () => {\n        if (index < binStr32.length) {\n          return { value: binStr32[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n","import {\n  C_BUS_INTERRUPT_VAL,\n  C_BUS_READ_16_VAL,\n  C_BUS_READ_32_VAL,\n  C_BUS_READ_8_VAL,\n  C_BUS_WRITE_16_VAL,\n  C_BUS_WRITE_32_VAL,\n  C_BUS_WRITE_8_VAL,\n  RAM_DEV_KEY,\n} from \"../var/def.js\";\nimport { Buffer32Bit } from \"./buf.js\";\n\n/**\n * Represents a bus system that connects devices and allows them to communicate with each other.\n * It has three buffers for the address, data, and control signals, and can read and write data from and to devices.\n */\nexport class Bus {\n  /**\n   * Creates a new Bus instance.\n   * @param {Object} dev - An object containing the devices connected to the bus.\n   * @constructor\n   */\n  constructor(dev) {\n    /**\n     * An object containing the devices connected to the bus.\n     * @type {Object}\n     */\n    this.DEVICES = dev;\n\n    /**\n     * The ADDRESS-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.A_BUS_BUFFER = new Buffer32Bit(\"ADDRESS_BUS\");\n\n    /**\n     * The CONTROL-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.C_BUS_BUFFER = new Buffer32Bit(\"CONTROL_BUS\");\n\n    /**\n     * The DATA-BUS buffer.\n     * @type {Buffer32Bit}\n     */\n    this.D_BUS_BUFFER = new Buffer32Bit(\"DATA_BUS\");\n\n    this.onTick = this.onTick.bind(this);\n  }\n\n  /**\n   * Sets the value of the ADDRESS-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setAddress(val) {\n    // NOTE: first 8bits of address represents the device key\n    this.A_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Sets the value of the CONTROL-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setControl(val) {\n    this.C_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Sets the value of the DATA-BUS buffer.\n   * @param {number} val - The value to set.\n   */\n  setData(val) {\n    this.D_BUS_BUFFER.write(val);\n  }\n\n  /**\n   * Returns the value of the data bus.\n   * @return {number} The value of the data bus.\n   */\n  getData() {\n    const data = this.D_BUS_BUFFER.read();\n    this.D_BUS_BUFFER.flush();\n    return data;\n  }\n\n  /**\n   * Returns the values of the address, data, and control buses.\n   * @return {Object} An object containing the values of the address, data, and control buses.\n   */\n  view() {\n    return {\n      address: this.A_BUS_BUFFER.view(),\n      data: this.D_BUS_BUFFER.view(),\n      control: this.C_BUS_BUFFER.view(),\n    };\n  }\n\n  /**\n   * Handles bus transactions on each tick of the clock.\n   * If the address bus buffer is not empty, it reads the device key and byte offset from the address bus buffer,\n   * then determines the type of bus transaction based on the value in the control bus buffer.\n   * If the transaction is a read operation, it reads the specified number of bytes from the device at the specified byte offset\n   * and writes the data to the data bus buffer.\n   * If the transaction is a write operation, it writes the data in the data bus buffer to the device at the specified byte offset.\n   * If the transaction is an interrupt request, it logs a message indicating that interrupt handling is not yet implemented.\n   * Finally, it flushes the address bus buffer.\n   */\n  onTick() {\n    if (this.A_BUS_BUFFER.IS_EMPTY) return;\n    const device =\n      this.DEVICES[this.A_BUS_BUFFER.read() & ((((1 << 8) - 1) << 24) >>> 0)];\n    const byteOffset = this.A_BUS_BUFFER.read() ^ RAM_DEV_KEY;\n\n    // read data from memory into register\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_8_VAL)) {\n      this.D_BUS_BUFFER.write(device.read8(byteOffset));\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_16_VAL)) {\n      this.D_BUS_BUFFER.write(device.read16(byteOffset));\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_READ_32_VAL)) {\n      this.D_BUS_BUFFER.write(device.read32(byteOffset));\n    }\n\n    // write data from register into memory\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_8_VAL)) {\n      device.write8(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_16_VAL)) {\n      device.write16(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_WRITE_32_VAL)) {\n      device.write32(this.D_BUS_BUFFER.read(), byteOffset);\n    }\n\n    // handle interrupts\n    if (!(this.C_BUS_BUFFER.read() ^ C_BUS_INTERRUPT_VAL)) {\n      console.log(\"TODO: handle interrupt signals here\");\n    }\n\n    this.A_BUS_BUFFER.flush();\n  }\n}\n","import {\n  C_BUS_READ_32_VAL,\n  ON_FETCH_CYCLE_START,\n  ON_DECODE_CYCLE_START,\n  ON_EXECUTE_CYCLE_START,\n  TEXT_SECTION,\n  STACK_SECTION,\n  ENV_SECTION,\n  HEAP_SECTION,\n  BSS_SECTION,\n  INIT_DATA_SECTION,\n  ON_FETCH_CYCLE_END,\n  ON_DECODE_CYCLE_END,\n  ON_EXECUTE_CYCLE_END,\n} from \"../var/def.js\";\n\n/**\n * A class representing the Central Processing Unit (CPU) of a computer.\n *\n * The Cpu class acts as a coordinator of different hardware components and\n * handles the fetch-decode-execute cycle.\n */\nexport class Cpu {\n  /**\n   * Creates an instance of Cpu.\n   *\n   * @param {Object} parts - The hardware components required by the CPU.\n   * @param {ALU} parts.alu - The Arithmetic Logic Unit of the CPU.\n   * @param {DEC} parts.dec - The Instruction Decoder of the CPU.\n   * @param {BUS} parts.bus - The Data Bus of the CPU.\n   * @param {REG} parts.reg - The Register Bank of the CPU.\n   * @param {MMU} parts.mmu - The Memory Management Unit of the CPU.\n   * @param {CLK} parts.clk - The Clock of the CPU.\n   */\n  constructor(parts) {\n    this.ALU = parts.alu;\n    this.DEC = parts.dec;\n    this.BUS = parts.bus;\n    this.REG = parts.reg;\n    this.MMU = parts.mmu;\n    this.CLK = parts.clk;\n\n    this.CURRENT_PID = 0;\n    this.CURRENT_INSTRUCTION = null;\n    this.ALU_ROUTINE = null;\n\n    this.MMU.conn2bus(this.BUS);\n    this.ALU.conn2reg(this.REG);\n\n    this._fetch = this._fetch.bind(this);\n    this._decode = this._decode.bind(this);\n    this._execute = this._execute.bind(this);\n\n    this.CLK.addEventListener(ON_FETCH_CYCLE_START, this._fetch);\n    this.CLK.addEventListener(ON_DECODE_CYCLE_START, this._decode);\n    this.CLK.addEventListener(ON_EXECUTE_CYCLE_START, this._execute);\n\n    this.CLK.addEventListener(ON_FETCH_CYCLE_START, this.BUS.onTick);\n    this.CLK.addEventListener(ON_DECODE_CYCLE_START, this.BUS.onTick);\n    this.CLK.addEventListener(ON_EXECUTE_CYCLE_START, this.BUS.onTick);\n  }\n\n  /**\n   * Start the fetch-decode-execute cycle.\n   *\n   * @returns {Cpu} The Cpu instance.\n   */\n  run() {\n    this.CLK.start();\n    return this;\n  }\n\n  /**\n   * Spawn a process by initializing the Program Counter (PC) and Stack Pointer (SP).\n   *\n   * @param {number} pid - The Process ID of the process to spawn.\n   * @returns {Cpu} The Cpu instance.\n   */\n\n  spawn(pid) {\n    this.REG.pc.write(this.MMU.for(pid).PROC_START_ADDRESS);\n    this.REG.sp.write(this.MMU.for(pid).STACK_SEC_START_ADDRESS);\n    this.CURRENT_PID = pid;\n    return this;\n  }\n\n  /**\n   * Load an Executable and Linkable Format (ELF) file into memory.\n   *\n   * @param {Object} elf - The ELF file to be loaded.\n   * @param {number} elf.procSize - The size of the process.\n   * @param {number} elf.envSize - The size of the environment section of the ELF file.\n   * @param {Array} elf.envContent - The content of the environment section of the ELF file.\n   * @param {number} elf.textSize - The size of the text section of the ELF file.\n   * @param {Array} elf.textContent - The content of the text section of the ELF file.\n   * @param {number} elf.initDataSize - The size of the initialized data section of the ELF file.\n   * @param {Array} elf.initDataContent - The content of the initialized data section of the ELF file.\n   * @param {number} elf.bssSize - The size of the block started by symbol section of the ELF file.\n   * @param {Array} elf.bssContent - The content of the block started by symbol section of the ELF file.\n   * @returns {Object} The loaded ELF file with additional properties (pid, envUUUID, textUUUID, initDataUUID, bssUUID).\n   */\n  load(elf) {\n    const pid = this.MMU.processAlloc(elf.procSize);\n    const extELF = { ...elf, pid };\n\n    // order is important\n    extELF[\"envUUIDS\"] = this.MMU.malloc(\n      pid,\n      ENV_SECTION,\n      elf.envSize,\n      elf.envContent\n    );\n    this.MMU.malloc(pid, STACK_SECTION, undefined, []);\n    extELF[\"textUUIDS\"] = this.MMU.malloc(\n      pid,\n      TEXT_SECTION,\n      elf.textSize,\n      elf.textContent\n    );\n    extELF[\"initDataUUIDS\"] = this.MMU.malloc(\n      pid,\n      INIT_DATA_SECTION,\n      elf.initDataSize,\n      elf.initDataContent\n    );\n    extELF[\"bssUUIDS\"] = this.MMU.malloc(\n      pid,\n      BSS_SECTION,\n      elf.bssSize,\n      elf.bssContent\n    );\n    this.MMU.malloc(pid, HEAP_SECTION, undefined, []);\n    return extELF;\n  }\n\n  /**\n   * Fetches the instruction from memory using the bus and saves the instruction address in the PC register.\n   * @private\n   */\n  _fetch() {\n    if (\n      this.REG.pc.read() < this.MMU.for(this.CURRENT_PID).TEXT_SEC_END_ADDRESS\n    ) {\n      const pc = this.REG.pc.read();\n      this.BUS.setAddress(this.MMU.translate(pc));\n      this.BUS.setControl(C_BUS_READ_32_VAL);\n      this.REG.pc.write(pc + 4);\n    } else {\n      this.CLK.stop();\n    }\n  }\n\n  /**\n   * Decodes the instruction fetched by the bus and saves the decoded instruction and ALU routine.\n   * @private\n   */\n  _decode() {\n    const { instruction, aluRoutine } = this.DEC.decode(this.BUS.getData());\n    this.CURRENT_INSTRUCTION = instruction;\n    this.ALU_ROUTINE = aluRoutine;\n  }\n\n  /**\n   * Executes the ALU routine associated with the decoded instruction.\n   * @private\n   */\n  _execute() {\n    this.ALU.call({\n      pid: this.CURRENT_PID,\n      routine: this.ALU_ROUTINE,\n      instruction: this.CURRENT_INSTRUCTION,\n      virtualAddress: this.REG.pc.read() - 4,\n    });\n  }\n}\n","import {\n  ON_BUFFER_32_WRITE,\n  ON_BUFFER_32_READ,\n  ON_REG_READ,\n  ON_REG_WRITE,\n} from \"../var/def.js\";\nimport { Buffer32Bit } from \"./buf.js\";\n\n/**\n * A class representing a set of registers in a processor.\n * @extends EventTarget\n */\nexport class Reg extends EventTarget {\n  /**\n   * Creates a new set of registers.\n   * @constructor\n   */\n  constructor() {\n    super();\n\n    this._r1 = new Buffer32Bit(\"r1\");\n    this._r2 = new Buffer32Bit(\"r2\");\n    this._r3 = new Buffer32Bit(\"r3\");\n    this._r4 = new Buffer32Bit(\"r4\");\n    this._r5 = new Buffer32Bit(\"r5\");\n    this._r6 = new Buffer32Bit(\"r6\");\n    this._r7 = new Buffer32Bit(\"r7\");\n    this._r8 = new Buffer32Bit(\"r8\");\n    this._r9 = new Buffer32Bit(\"r9\");\n    this._r10 = new Buffer32Bit(\"r10\");\n    this._r11 = new Buffer32Bit(\"r11\");\n    this._r12 = new Buffer32Bit(\"r12\");\n    this._sp = new Buffer32Bit(\"sp\");\n    this._lr = new Buffer32Bit(\"lr\");\n    this._pc = new Buffer32Bit(\"pc\");\n    this._cpsr = new Buffer32Bit(\"cpsr\");\n\n    this._readEventHandler = this._readEventHandler.bind(this);\n    this._writeEventHandler = this._writeEventHandler.bind(this);\n\n    this._r1.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r2.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r3.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r4.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r5.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r6.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r7.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r8.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r9.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r10.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r11.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._r12.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._sp.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._lr.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._pc.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n    this._cpsr.addEventListener(ON_BUFFER_32_READ, this._readEventHandler);\n\n    this._r1.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r2.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r3.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r4.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r5.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r6.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r7.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r8.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r9.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r10.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r11.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._r12.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._sp.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._lr.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._pc.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n    this._cpsr.addEventListener(ON_BUFFER_32_WRITE, this._writeEventHandler);\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r1 general-purpose register. Can be used for any purpose.\n   */\n  get r1() {\n    return this._r1;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r2 general-purpose register. Can be used for any purpose.\n   */\n  get r2() {\n    return this._r2;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r3 general-purpose register. Can be used for any purpose.\n   */\n  get r3() {\n    return this._r3;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r4 general-purpose register. Can be used for any purpose.\n   */\n  get r4() {\n    return this._r4;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r5 general-purpose register. Can be used for any purpose.\n   */\n  get r5() {\n    return this._r5;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r6 general-purpose register. Can be used for any purpose.\n   */\n  get r6() {\n    return this._r6;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r7 general-purpose register. Can be used for any purpose.\n   */\n  get r7() {\n    return this._r7;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r8 general-purpose register. Can be used for any purpose.\n   */\n  get r8() {\n    return this._r8;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r9 general-purpose register. Can be used for any purpose.\n   */\n  get r9() {\n    return this._r9;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r10 general-purpose register. Can be used for any purpose.\n   */\n  get r10() {\n    return this._r10;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r11 general-purpose register. Can be used for any purpose.\n   */\n  get r11() {\n    return this._r11;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r12 general-purpose register. Can be used for any purpose.\n   */\n  get r12() {\n    return this._r12;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r13 stack pointer register. Points to the top of the stack.[alias SP]\n   */\n  get sp() {\n    return this._sp;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r14 link register. Stores the return address for function calls.[alias LR]\n   */\n  get lr() {\n    return this._lr;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The r15 program counter register. Stores the address of the current instruction.[alias PC]\n   */\n  get pc() {\n    return this._pc;\n  }\n\n  /**\n   * @returns {Buffer32Bit} The current program status register.\n   * Stores the current status of the processor, such as the current processor mode and condition flags.\n   */\n  get cpsr() {\n    return this._cpsr;\n  }\n\n  /**\n   * The event handler for the ON_REG_READ event.\n   * @param {CustomEvent} event - The ON_REG_READ event.\n   * @private\n   */\n  _readEventHandler({ detail }) {\n    this.dispatchEvent(new CustomEvent(ON_REG_READ, { detail }));\n  }\n\n  /**\n   * The event handler for the ON_REG_WRITE event.\n   * @param {CustomEvent} event - The ON_REG_WRITE event.\n   * @private\n   */\n  _writeEventHandler({ detail }) {\n    this.dispatchEvent(new CustomEvent(ON_REG_WRITE, { detail }));\n  }\n\n  /**\n   * Allows an instance of Reg class(this) to be used in a for...of loop returning one of the\n   * registers in each iteration.\n   * @returns {Object} An object conforming to the iterator protocol with a `next` method.\n   * The `next` method returns an object with two properties: `value` and `done`.\n   * The `value` property represents the next value in the iteration.\n   * The `done` property is a boolean indicating if the iteration has finished.\n   */\n  [Symbol.iterator]() {\n    const registers = [\n      this.r1,\n      this.r2,\n      this.r3,\n      this.r4,\n      this.r5,\n      this.r6,\n      this.r7,\n      this.r8,\n      this.r9,\n      this.r10,\n      this.r11,\n      this.r12,\n      this.sp,\n      this.lr,\n      this.pc,\n      this.cpsr,\n    ];\n    let index = 0;\n    return {\n      next: () => {\n        if (index < registers.length) {\n          return { value: registers[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n","import {\n  BSS_SECTION,\n  ENV_SECTION,\n  HEAP_SECTION,\n  INIT_DATA_SECTION,\n  STACK_SECTION,\n  TEXT_SECTION,\n} from \"../var/def.js\";\n\n// NOTE: start and end byte are inclusive\n\nexport class Process {\n  constructor(pid, startAddr, endAddr) {\n    this.PID = pid;\n\n    this.PROC_START_ADDRESS = startAddr;\n    this.PROC_END_ADDRESS = endAddr;\n\n    // TODO: implement allocation of stack and heap size and manage their growth\n    // stack grows down heap grows up\n  }\n\n  set(section, size) {\n    switch (section) {\n      case ENV_SECTION:\n        this.ENV_START_ADDRESS = this.PROC_END_ADDRESS - size;\n        this.ENV_END_ADDRESS = this.PROC_END_ADDRESS;\n        return this.ENV_START_ADDRESS;\n\n      case STACK_SECTION:\n        this.STACK_SEC_START_ADDRESS = this.ENV_START_ADDRESS - 1;\n        this.STACK_SEC_END_ADDRESS = this.ENV_START_ADDRESS + 2;\n        return this.STACK_SEC_START_ADDRESS;\n\n      case HEAP_SECTION:\n        this.HEAP_START_ADDRESS = this.BSS_SEC_END_ADDRESS + 1;\n        this.HEAP_END_ADDRESS = this.BSS_SEC_END_ADDRESS + 2;\n        return this.HEAP_START_ADDRESS;\n\n      case BSS_SECTION:\n        this.BSS_SEC_START_ADDRESS = this.INIT_DATA_SEC_END_ADDRESS + 1;\n        this.BSS_SEC_END_ADDRESS = this.BSS_SEC_START_ADDRESS + size;\n        return this.BSS_SEC_START_ADDRESS;\n\n      case INIT_DATA_SECTION:\n        this.INIT_DATA_SEC_START_ADDRESS = this.TEXT_SEC_END_ADDRESS + 1;\n        this.INIT_DATA_SEC_END_ADDRESS =\n          this.INIT_DATA_SEC_START_ADDRESS + size;\n        return this.INIT_DATA_SEC_START_ADDRESS;\n\n      case TEXT_SECTION:\n        this.TEXT_SEC_START_ADDRESS = this.PROC_START_ADDRESS;\n        this.TEXT_SEC_END_ADDRESS = this.TEXT_SEC_START_ADDRESS + size;\n        return this.TEXT_SEC_START_ADDRESS;\n\n      default:\n        // TODO: call an interrupt signal here\n        break;\n    }\n  }\n}\n","/**\n * Calculates the Fletcher-16 checksum of a string of data.\n *\n * @param {string} data - The data to be checksummed.\n * @returns {number} - The calculated 16-bit checksum value.\n */\nexport function fletcher16(data) {\n  let sum1 = 0;\n  let sum2 = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    sum1 = (sum1 + data.charCodeAt(i)) % 255;\n    sum2 = (sum2 + sum1) % 255;\n  }\n\n  return (sum2 << 8) | sum1;\n}\n","import { Process } from \"./proc.js\";\nimport { RAM_DEV_KEY } from \"../var/def.js\";\nimport { fletcher16 } from \"../lib/checksum.js\";\n\nexport class Mmu {\n  // virtual memory management unit\n  constructor() {\n    this.PROCESSES = new Map();\n  }\n\n  conn2bus(bus) {\n    this.RAM = bus.DEVICES[RAM_DEV_KEY];\n    this.PAGE_TABLE = null;\n  }\n\n  // create new process and assign page memory which maps to physical memory frame\n  processAlloc(size) {\n    // TODO: implement paging lookup tables\n    const pid = 1;\n    const startAddr = 0;\n    const endAddr = size;\n    const proc = new Process(pid, startAddr, endAddr);\n    this.PROCESSES.set(pid, proc);\n    return pid;\n  }\n\n  // return the process instance given the pid\n  for(pid) {\n    return this.PROCESSES.get(pid);\n  }\n\n  // given the pid allocate a section and pack content into the allocated section (nb skip packing if content is empty)\n  malloc(pid, section, size, content) {\n    let contentChecksums = [];\n    const proc = this.PROCESSES.get(pid);\n    const startAddr = proc.set(section, size || 4);\n    for (let i = startAddr, len = startAddr + content.length; i < len; i++) {\n      const entry = content[i];\n      const virtualAddr = i * 4;\n      const physicalAddr = this._lookup(virtualAddr);\n      this.RAM.write32(entry, physicalAddr);\n      contentChecksums.push(fletcher16(`${pid}-${entry}-${virtualAddr}`));\n    }\n    return contentChecksums;\n  }\n\n  // translate a virtual page address to a physical frame address\n  translate(virtualAddress) {\n    return RAM_DEV_KEY | this._lookup(virtualAddress);\n  }\n\n  _lookup(virtualAddress) {\n    return virtualAddress;\n  }\n}\n","/**\n\nT0 - main encoding\n    T1 - data-processing and miscellaneous instructions\n        T11 - Extra load/store                                                              **\n        T12 - Multiply and Accumulate\n            • MUL/MULS\n        T13 - Synchronization primitives and Load-Acquire/Store-Release                     **\n        T14 - Miscellaneous\n            • BX\n            • CLZ\n        T15 - Halfword Multiply and Accumulate                                              **\n        T16 - Data-processing register (immediate shift)\n\n        T17 - Data-processing register (register shift)\n        \n        T18 - Data-processing immediate  \n            T181 - Integer Data Processing (two register and immediate)\n                • AND, ANDS (immediate)\n                • EOR, EORS (immediate)\n                • SUB, SUBS (immediate) - SUB variant\n                • SUB, SUBS (SP minus immediate) - SUB variant \n                • ADR - A2\n                • SUB, SUBS (immediate) - SUBS variant\n                • SUB, SUBS (SP minus immediate) - SUBS variant \n                • RSB, RSBS (immediate)\n                • ADD, ADDS (immediate) - ADD variant\n                • ADD, ADDS (SP plus immediate) - ADD variant \n                • ADR - A1\n                • ADD, ADDS (immediate) - ADDS variant\n                • ADD, ADDS (SP plus immediate) - ADDS variant\n                • ADC, ADCS (immediate)\n                • SBC, SBCS (immediate)\n                • RSC, RSCS (immediate)\n            T182 - Move Halfword (immediate) \n                • MOV, MOVS (immediate)\n                • MOVT\n            T183 - Move Special Register and Hints (immediate)                              **\n            T184 - Integer Test and Compare (one register and immediate) \n                • TST (immediate)\n                • TEQ (immediate)\n                • CMP (immediate)\n                • CMN (immediate)\n            T185 - Logical Arithmetic (two register and immediate)\n                • ORR, ORRS (immediate)\n                • MOV, MOVS (immediate)\n                • BIC, BICS (immediate)\n                • MVN, MVNS (immediate)\n\n    T2 - Load/Store Word, Unsigned Byte (immediate, literal)\n        • LDR(literal)\n        • LDR(immediate) - Post index variant\n        • LDR(immediate) - Offset variant\n        • LDRB(literal)\n        • LDRB(immediate) - Post index variant\n        • LDRB(immediate) - Offset variant\n        • STR(immediate) - Pre index variant\n        • STR(immediate) - Post index variant\n        • STR(immediate) - Offset variant\n        • STRB(immediate) - Post index variant\n        • STRB(immediate) - Offset variant\n\n    T3 - Load/Store Word, Unsigned Byte (register)\n        • LDR (register) - Pre-indexed variant\n        • LDR (register) - Post indexed variant\n        • LDRB (register) - Pre indexed variant\n        • LDRB (register) - Post indexed variant\n        • STR (register) - Pre-indexed variant\n        • STR (register) - Post indexed variant\n        • STRB (register) - Pre indexed variant\n        • STRB (register) - Post indexed variant\n\n    T4 - Media instructions                                                                 **\n\n    T5 - Branch, branch with link, and block data transfer\n        T51 - Exception Save/Restore                                                        **\n        T52 - Load/Store Multiple                                                           **\n        T53 - Branch (immediate)\n            • B\n            • BL (immediate)\n            • BLX (immediate)\n\n    T6 - System register access, Advanced SIMD, floating-point, and Supervisor call         **\n\n    T7 - Unconditional instructions                                                         **\n\n */\n\nexport class Dec {\n  // Machine code decoder\n  constructor() {\n    this.INSTRUCTION = null;\n\n    // prettier-ignore\n    this.T0 = [\n        [[\"_ne\", 0b1111],         [\"_eqC\", \"00x\"],        [\"_any\"],           [\"_lup\", \"_T1\"]],                             // data-processing and miscellaneous instructions\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b010],         [\"_any\"],           [\"_lup\", \"_T2\"]],                             // Load/Store Word, Unsigned Byte (immediate, literal)\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b011],         [\"_eq\", 0b0],       [\"_lup\", \"_T3\"]],                             // Load/Store Word, Unsigned Byte (register)\n        [[\"_ne\", 0b1111],         [\"_eq\", 0b011],         [\"_eq\", 0b1],       [\"_ret\", undefined]],   // Media instructions\n        [[\"_any\"],                [\"_eqC\", \"10x\"],        [\"_any\"],           [\"_lup\", \"_T5\"]],                             // Branch, branch with link, and block data transfer\n        [[\"_any\"],                [\"_eqC\", \"11x\"],        [\"_any\"],           [\"_ret\", undefined]],   // System register access, Advanced SIMD, floating-point, and Supervisor call\n        [[\"_eq\", 0b1111],         [\"_eqC\", \"0xx\"],        [\"_any\"],           [\"_ret\", undefined]],   // Unconditional instructions\n    ];\n    // prettier-ignore\n    this.T1 = [\n        [[\"_eq\", 0b0],        [\"_any\"],               [\"_eq\", 0b1],       [\"_ne\", 0b00],      [\"_eq\", 0b1],       [\"_ret\", undefined]],   // Extra load/store \n        [[\"_eq\", 0b0],        [\"_eqC\", \"0xxxx\"],      [\"_eq\", 0b1],       [\"_eq\", 0b00],      [\"_eq\", 0b1],       [\"_lup\", \"_T12\"]],                            // Multiply and Accumulate \n        [[\"_eq\", 0b0],        [\"_eqC\", \"1xxxx\"],      [\"_eq\", 0b1],       [\"_eq\", 0b00],      [\"_eq\", 0b1],       [\"_ret\", undefined]],   // Synchronization primitives and Load-Acquire/Store-Release \n        [[\"_eq\", 0b0],        [\"_eqC\", \"10xx0\"],      [\"_eq\", 0b0],       [\"_any\"],           [\"_any\"],           [\"_lup\", \"_T14\"]],                            // Miscellaneous \n        [[\"_eq\", 0b0],        [\"_eqC\", \"10xx0\"],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", undefined]],   // Halfword Multiply and Accumulate  \n        [[\"_eq\", 0b0],        [\"_neC\", \"10xx0\"],      [\"_any\"],           [\"_any\"],           [\"_eq\", 0b0],       [\"_lup\", \"_T16\"]],                            // Data-processing register (immediate shift) \n        [[\"_eq\", 0b0],        [\"_neC\", \"10xx0\"],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b1],       [\"_lup\", \"_T16\"]],                            // Data-processing register (register shift) \n        [[\"_eq\", 0b1],        [\"_any\"],               [\"_any\"],           [\"_any\"],           [\"_any\"],           [\"_lup\", \"_T18\"]],                            // Data-processing immediate  \n    ];\n    // prettier-ignore\n    this.T12 = [\n        // TODO: not all opcodes implemented \n        [[\"_eq\", 0b000],       [\"_any\"],       [\"_ret\", \"MUL_MULS\"]],         // MUL/MULS\n    ]\n    // prettier-ignore\n    this.T14 = [\n      // TODO: not all opcodes implemented\n      [[\"_eq\", 0b01], [\"_eq\", 0b001], [\"_ret\", \"BX\"]], // BX\n      [[\"_eq\", 0b11], [\"_eq\", 0b001], [\"_ret\", \"CLZ\"]], // CLZ\n    ];\n    // prettier-ignore\n    this.T18 = [\n        [[\"_eqC\", \"0x\"],        [\"_any\"],           [\"_lup\", \"_T181\"]],                             // Integer Data Processing (two register and immediate)\n        [[\"_eq\", 0b10],         [\"_eq\", 0b00],      [\"_lup\", \"_T182\"]],                             // Move Halfword (immediate) \n        [[\"_eq\", 0b10],         [\"_eq\", 0b10],      [\"_ret\", undefined]],     // Move Special Register and Hints (immediate) \n        [[\"_eq\", 0b10],         [\"_eqC\", \"x1\"],     [\"_lup\", \"_T184\"]],                             // Integer Test and Compare (one register and immediate) \n        [[\"_eq\", 0b11],         [\"_any\"],           [\"_lup\", \"_T185\"]],                             // Logical Arithmetic (two register and immediate)\n    ]\n    // prettier-ignore\n    this.T181 = [\n        [[\"_eq\", 0b000],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"AND_ANDS_IMD\"]],              // AND, ANDS (immediate)\n        [[\"_eq\", 0b001],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"EOR_EORS_IMD\"]],              // EOR, EORS (immediate)\n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_neC\",\"11x1\"],        [\"_ret\", \"SUB_IMD\"]],                   // SUB, SUBS (immediate) - SUB variant\n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_eq\", 0b1101],        [\"_ret\", \"SUB_IMD_SP\"]],                // SUB, SUBS (SP minus immediate) - SUB variant \n        [[\"_eq\", 0b010],        [\"_eq\", 0b0],   [\"_eq\", 0b1111],        [\"_ret\", \"ADR_A2\"]],                    // ADR - A2\n        [[\"_eq\", 0b010],        [\"_eq\", 0b1],   [\"_ne\", 0b1101],        [\"_ret\", \"SUBS_IMD\"]],                  // SUB, SUBS (immediate) - SUBS variant\n        [[\"_eq\", 0b010],        [\"_eq\", 0b1],   [\"_eq\", 0b1101],        [\"_ret\", \"SUBS_IMD_SP\"]],               // SUB, SUBS (SP minus immediate) - SUBS variant \n        [[\"_eq\", 0b011],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"RSB_RSBS_IMD\"]],              // RSB, RSBS (immediate)\n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_neC\",\"11x1\"],        [\"_ret\", \"ADD_IMD\"]],                   // ADD, ADDS (immediate) - ADD variant\n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_eq\", 0b1101],        [\"_ret\", \"ADD_IMD_SP\"]],                // ADD, ADDS (SP plus immediate) - ADD variant \n        [[\"_eq\", 0b100],        [\"_eq\", 0b0],   [\"_eq\", 0b1111],        [\"_ret\", \"ADR_A1\"]],                    // ADR - A1\n        [[\"_eq\", 0b100],        [\"_eq\", 0b1],   [\"_ne\", 0b1101],        [\"_ret\", \"ADDS_IMD\"]],                  // ADD, ADDS (immediate) - ADDS variant\n        [[\"_eq\", 0b100],        [\"_eq\", 0b1],   [\"_eq\", 0b1101],        [\"_ret\", \"ADDS_IMD_SP\"]],               // ADD, ADDS (SP plus immediate) - ADDS variant\n        [[\"_eq\", 0b101],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"ADC_ADCS_IMD\"]],              // ADC, ADCS (immediate)\n        [[\"_eq\", 0b110],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"SBC_SBCS_IMD\"]],              // SBC, SBCS (immediate)\n        [[\"_eq\", 0b111],        [\"_any\"],       [\"_any\"],               [\"_ret\", \"RSC_RSCS_IMD\"]],              // RSC, RSCS (immediate)\n    ]\n    // prettier-ignore\n    this.T182 = [\n        [[\"_eq\", 0b0],    [\"_ret\", \"MOV_MOVS_IMD\"]],        // MOV, MOVS (immediate)\n        [[\"_eq\", 0b1],    [\"_ret\", \"MOVT\"]],                // MOVT\n    ]\n    // prettier-ignore\n    this.T184 = [\n        [[\"_eq\", 0b00],    [\"_ret\", \"TST_IMD\"]],         // TST (immediate)\n        [[\"_eq\", 0b01],    [\"_ret\", \"TEQ_IMD\"]],         // TEQ (immediate)\n        [[\"_eq\", 0b10],    [\"_ret\", \"CMP_IMD\"]],         // CMP (immediate)\n        [[\"_eq\", 0b11],    [\"_ret\", \"CMN_IMD\"]],         // CMN (immediate)\n    ]\n    // prettier-ignore\n    this.T185 = [\n        [[\"_eq\", 0b00], [\"_ret\", \"ORR_ORRS_IMD\"]],         // ORR, ORRS (immediate)\n        [[\"_eq\", 0b01], [\"_ret\", \"MOV_MOVS_IMD\"]],         // MOV, MOVS (immediate)\n        [[\"_eq\", 0b10], [\"_ret\", \"BIC_BICS_IMD\"]],         // BIC, BICS (immediate)\n        [[\"_eq\", 0b11], [\"_ret\", \"MVN_MVNS_IMD\"]],         // MVN, MVNS (immediate)\n    ]\n    // prettier-ignore\n    this.T2 = [\n        // TODO: not all opcodes implemented \n        [[\"_ne\", 0b01],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_eq\", 0b1111],        [\"_ret\", \"LDR_LIT\"]],          // LDR(literal)\n        [[\"_eq\", 0b00],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDR_IMD_POST\"]],     // LDR(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDR_IMD_OFST\"]],     // LDR(immediate) - Offset variant\n        [[\"_ne\", 0b01],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_eq\", 0b1111],        [\"_ret\", \"LDRB_LIT\"]],         // LDRB(literal)\n        [[\"_eq\", 0b00],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDRB_IMD_POST\"]],    // LDRB(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b1],       [\"_eq\", 0b1],       [\"_ne\", 0b1111],        [\"_ret\", \"LDRB_IMD_OFST\"]],    // LDRB(immediate) - Offset variant\n        [[\"_eq\", 0b11],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_PRE\"]],      // STR(immediate) - Pre index variant\n        [[\"_eq\", 0b00],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_POST\"]],     // STR(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STR_IMD_OFST\"]],     // STR(immediate) - Offset variant\n        [[\"_eq\", 0b00],       [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STRB_IMD_POST\"]],    // STRB(immediate) - Post index variant\n        [[\"_eq\", 0b10],       [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_any\"],               [\"_ret\", \"STRB_IMD_OFST\"]],    // STRB(immediate) - Offset variant\n    ];\n    // prettier-ignore\n    this.T3 = [\n        // TODO: not all opcodes implemented \n        [[\"_eq\", 0b1],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b1],       [\"_ret\", \"LDR_REG_PRE\"]],        // LDR (register) - Pre-indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ret\", \"LDR_REG_POST\"]],       // LDR (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b1],       [\"_ret\", \"LDRB_REG_PRE\"]],       // LDRB (register) - Pre indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_eq\", 0b1],       [\"_ret\", \"LDRB_REG_POST\"]],      // LDRB (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b0],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", \"STR_REG_PRE\"]],        // STR (register) - Pre-indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_ret\", \"STR_REG_POST\"]],       // STR (register) - Post indexed variant\n        [[\"_eq\", 0b1],      [\"_eq\", 0b1],       [\"_any\"],           [\"_eq\", 0b0],       [\"_ret\", \"STRB_REG_PRE\"]],       // STRB (register) - Pre indexed variant\n        [[\"_eq\", 0b0],      [\"_eq\", 0b1],       [\"_eq\", 0b0],       [\"_eq\", 0b0],       [\"_ret\", \"STRB_REG_POST\"]],      // STRB (register) - Post indexed variant\n    ];\n    // prettier-ignore\n    this.T5 = [\n        [[\"_eq\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", undefined]],        // Exception Save/Restore\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", undefined]],        // Load/Store Multiple\n        [[\"any\"],               [\"_eq\", 0b1],       [\"_lup\", \"T53\"]],                                  // Branch (immediate)\n    ]\n    // prettier-ignore\n    this.T53 = [\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b0],       [\"_ret\", \"B\"]],         // B\n        [[\"_ne\", 0b1111],       [\"_eq\", 0b1],       [\"_ret\", \"BL\"]],        // BL/BLX (immediate)\n        [[\"_eq\", 0b1111],       [\"_any\"],           [\"_ret\", \"BLX\"]],       // BL/BLX (immediate)\n    ]\n  }\n\n  decode(instruction) {\n    this.INSTRUCTION = instruction;\n    return {\n      instruction,\n      aluRoutine: this._T0(),\n    };\n  }\n\n  _any() {\n    return true;\n  }\n\n  _lup(fName) {\n    return this[fName].call(this);\n  }\n\n  _ret(code) {\n    return code;\n  }\n\n  _ne(v1, v2) {\n    return !!(v1 ^ v2);\n  }\n\n  _eq(v1, v2) {\n    return !(v1 ^ v2);\n  }\n\n  _neC(v1, v2) {\n    let v2str = v2.toString(2);\n    const v1len = v1.length;\n    while (v2str.length < v1len) {\n      v2str = \"0\" + v2str;\n    }\n    for (let i = 0; i < v1len; i++) {\n      const curV1 = v1[i];\n      const curV2 = v2str[i];\n      if (curV1 === \"x\") continue;\n      if (curV1 !== curV2) return true;\n    }\n    return false;\n  }\n\n  _eqC(v1, v2) {\n    let v2str = v2.toString(2);\n    const v1len = v1.length;\n    while (v2str.length < v1len) {\n      v2str = \"0\" + v2str;\n    }\n    for (let i = 0; i < v1len; i++) {\n      const curV1 = v1[i];\n      const curV2 = v2str[i];\n      if (curV1 === \"x\") continue;\n      if (curV1 !== curV2) return false;\n    }\n    return true;\n  }\n\n  // TABLE 0\n  _T0() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 3) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 4) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T0.length; i < len; i++) {\n      const entry = this.T0[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [op0_func, op0_v1] = entry[1];\n      const [op1_func, op1_v1] = entry[2];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  // TABLE x\n  _T1() {\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 1) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 20) & (((1 << 5) >>> 0) - 1);\n    const op2 = (this.INSTRUCTION >>> 7) & (((1 << 1) >>> 0) - 1);\n    const op3 = (this.INSTRUCTION >>> 5) & (((1 << 2) >>> 0) - 1);\n    const op4 = (this.INSTRUCTION >>> 4) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T1.length; i < len; i++) {\n      const entry = this.T1[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const [op2_func, op2_v1] = entry[2];\n      const [op3_func, op3_v1] = entry[3];\n      const [op4_func, op4_v1] = entry[4];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n        this[op2_func].call(this, op2_v1, op2),\n        this[op3_func].call(this, op3_v1, op3),\n        this[op4_func].call(this, op4_v1, op4),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T2() {\n    const p = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    const w = (this.INSTRUCTION >>> 21) & (((1 << 1) >>> 0) - 1);\n    const PW = (p << 1) + w;\n    const o2 = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    const o1 = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    const Rn = (this.INSTRUCTION >>> 16) & (((1 << 4) >>> 0) - 1);\n    for (let i = 0, len = this.T2.length; i < len; i++) {\n      const entry = this.T2[i];\n      const [PW_func, PW_v1] = entry[0];\n      const [o2_func, o2_v1] = entry[1];\n      const [o1_func, o1_v1] = entry[2];\n      const [Rn_func, Rn_v1] = entry[3];\n      const fields = [\n        this[PW_func].call(this, PW_v1, PW),\n        this[o2_func].call(this, o2_v1, o2),\n        this[o1_func].call(this, o1_v1, o1),\n        this[Rn_func].call(this, Rn_v1, Rn),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T3() {\n    const P = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    const o2 = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    const W = (this.INSTRUCTION >>> 21) & (((1 << 1) >>> 0) - 1);\n    const o1 = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T3.length; i < len; i++) {\n      const entry = this.T3[i];\n      const [P_func, P_v1] = entry[0];\n      const [o2_func, o2_v1] = entry[1];\n      const [W_func, W_v1] = entry[3];\n      const [o1_func, o1_v1] = entry[2];\n      const fields = [\n        this[P_func].call(this, P_v1, P),\n        this[o2_func].call(this, o2_v1, o2),\n        this[W_func].call(this, W_v1, W),\n        this[o1_func].call(this, o1_v1, o1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T5() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const op0 = (this.INSTRUCTION >>> 25) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T5.length; i < len; i++) {\n      const entry = this.T5[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [op0_func, op0_v1] = entry[1];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[op0_func].call(this, op0_v1, op0),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  // TABLE - 1x\n  _T12() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 3) >>> 0) - 1);\n    const S = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T12.length; i < len; i++) {\n      const entry = this.T12[i];\n      const [opc_func, opc_v1] = entry[0];\n      const [S_func, S_v1] = entry[1];\n      const fields = [\n        this[opc_func].call(this, opc_v1, opc),\n        this[S_func].call(this, S_v1, S),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T14() {\n    const op0 = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 4) & (((1 << 3) >>> 0) - 1);\n    for (let i = 0, len = this.T14.length; i < len; i++) {\n      const entry = this.T14[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T16() {\n    return \"T16\";\n  }\n\n  _T17() {\n    return \"T17\";\n  }\n\n  _T18() {\n    const op0 = (this.INSTRUCTION >>> 23) & (((1 << 2) >>> 0) - 1);\n    const op1 = (this.INSTRUCTION >>> 20) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T18.length; i < len; i++) {\n      const entry = this.T18[i];\n      const [op0_func, op0_v1] = entry[0];\n      const [op1_func, op1_v1] = entry[1];\n      const fields = [\n        this[op0_func].call(this, op0_v1, op0),\n        this[op1_func].call(this, op1_v1, op1),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  // TABLE 18x\n  _T181() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 3) >>> 0) - 1);\n    const S = (this.INSTRUCTION >>> 20) & (((1 << 1) >>> 0) - 1);\n    const Rn = (this.INSTRUCTION >>> 16) & (((1 << 4) >>> 0) - 1);\n    for (let i = 0, len = this.T181.length; i < len; i++) {\n      const entry = this.T181[i];\n      const [opc_func, opc_v1] = entry[0];\n      const [S_func, S_v1] = entry[1];\n      const [Rn_func, Rn_v1] = entry[2];\n      const fields = [\n        this[opc_func].call(this, opc_v1, opc),\n        this[S_func].call(this, S_v1, S),\n        this[Rn_func].call(this, Rn_v1, Rn),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T182() {\n    const H = (this.INSTRUCTION >>> 22) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T182.length; i < len; i++) {\n      const entry = this.T182[i];\n      const [H_func, H_v1] = entry[0];\n      const fields = [this[H_func].call(this, H_v1, H)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T184() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T184.length; i < len; i++) {\n      const entry = this.T184[i];\n      const [opc_func, opc_v1] = entry[0];\n      const fields = [this[opc_func].call(this, opc_v1, opc)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  _T185() {\n    const opc = (this.INSTRUCTION >>> 21) & (((1 << 2) >>> 0) - 1);\n    for (let i = 0, len = this.T185.length; i < len; i++) {\n      const entry = this.T185[i];\n      const [opc_func, opc_v1] = entry[0];\n      const fields = [this[opc_func].call(this, opc_v1, opc)];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n\n  // TABLE 5x\n  _T53() {\n    const cond = (this.INSTRUCTION >>> 28) & (((1 << 4) >>> 0) - 1);\n    const H = (this.INSTRUCTION >>> 24) & (((1 << 1) >>> 0) - 1);\n    for (let i = 0, len = this.T53.length; i < len; i++) {\n      const entry = this.T53[i];\n      const [cond_func, cond_v1] = entry[0];\n      const [H_func, H_v1] = entry[1];\n      const fields = [\n        this[cond_func].call(this, cond_v1, cond),\n        this[H_func].call(this, H_v1, H),\n      ];\n      if (fields.every((v) => v)) {\n        const [caller, callee] = entry[fields.length];\n        return this[caller].call(this, callee);\n      }\n    }\n    return undefined;\n  }\n}\n\nconst INSTRUCTION_SUBSET = [\n  \"ADC\",\n  \"ADD\",\n  \"ADR\",\n  \"AND\",\n  \"ASR\",\n  \"BIC\",\n  \"BL\",\n  \"CMN\",\n  \"CMP\",\n  \"DCD\",\n  \"END\",\n  \"EOR\",\n  \"EQU\",\n  \"FILL\",\n  \"LDM\",\n  \"LDR\",\n  \"LSL\",\n  \"LSR\",\n  \"MOV\",\n  \"MVN\",\n  \"ORR\",\n  \"ROR\",\n  \"RRX\",\n  \"RSB\",\n  \"RSC\",\n  \"SBC\",\n  \"STM\",\n  \"STR\",\n  \"SUB\",\n  \"TEQ\",\n  \"TST\",\n];\n","import { fletcher16 } from \"../lib/checksum.js\";\nimport { ON_ALU_EXECUTE } from \"../var/def.js\";\n\nexport class Alu extends EventTarget {\n  constructor() {\n    super();\n  }\n\n  conn2reg(reg) {\n    this.REG = reg;\n  }\n\n  call({ pid, routine, instruction, virtualAddress }) {\n    if (routine) {\n      console.log(\n        `Execute Opcode - ${routine.toString(2)} - ${instruction.toString(\n          16\n        )}\\n\\n`\n      );\n      const reg =\n        this.REG[\n          [\n            \"r1\",\n            \"r2\",\n            \"r3\",\n            \"r4\",\n            \"r5\",\n            \"r6\",\n            \"r7\",\n            \"r8\",\n            \"r9\",\n            \"r10\",\n            \"r11\",\n            \"r12\",\n            \"lr\",\n            \"cpsr\",\n          ][\n            Math.floor(Math.random() * (Math.floor(13) - Math.ceil(0) + 1)) +\n              Math.ceil(0)\n          ]\n        ];\n      reg.write(instruction);\n      this.dispatchEvent(\n        new CustomEvent(ON_ALU_EXECUTE, {\n          detail: {\n            pid,\n            instruction,\n            virtualAddress,\n            checkSum: fletcher16(`${pid}-${instruction}-${virtualAddress}`),\n          },\n        })\n      );\n    } else {\n      console.log(\n        `%c undefined - ${instruction.toString(16)}\\n\\n`,\n        \"background: black; color: white\"\n      );\n    }\n  }\n}\n","import * as DEF from \"./var/def.js\";\n\nimport { Clk } from \"./cmp/clock.js\";\nimport { Ram } from \"./cmp/ram.js\";\nimport { Bus } from \"./cmp/bus.js\";\nimport { Cpu } from \"./cmp/cpu.js\";\nimport { Reg } from \"./cmp/reg.js\";\nimport { Mmu } from \"./cmp/mmu.js\";\nimport { Dec } from \"./cmp/dec.js\";\nimport { Alu } from \"./cmp/alu.js\";\n\nconst ram = new Ram();\nconst reg = new Reg();\nconst mmu = new Mmu();\nconst dec = new Dec();\nconst alu = new Alu();\nconst clk = new Clk();\n\nconst bus = new Bus({ [DEF.RAM_DEV_KEY]: ram });\nconst cpu = new Cpu({ bus, reg, mmu, dec, alu, clk, ram });\n\nexport { DEF, cpu, bus, reg, mmu, dec, alu, clk, ram };\n"],"names":["ON_START","ON_STOP","ON_PAUSE","ON_RESUME","ON_STEP","ON_SPEED_CHANGE","ON_RAM_WRITE","ON_RAM_READ","ON_BUFFER_32_WRITE","ON_BUFFER_32_READ","ON_FETCH_CYCLE_START","ON_DECODE_CYCLE_START","ON_EXECUTE_CYCLE_START","ON_FETCH_CYCLE_END","ON_DECODE_CYCLE_END","ON_EXECUTE_CYCLE_END","ON_REG_WRITE","ON_REG_READ","ON_ALU_EXECUTE","ENV_SECTION","STACK_SECTION","HEAP_SECTION","BSS_SECTION","INIT_DATA_SECTION","TEXT_SECTION","OK_CODE","ERROR_CODE","STOP_CLOCK_KEY","START_CLOCK_KEY","PAUSE_CLOCK_KEY","FAST_CLOCK_SPEED","NORMAL_CLOCK_SPEED","SLOW_CLOCK_SPEED","C_BUS_READ_8_VAL","C_BUS_READ_16_VAL","C_BUS_READ_32_VAL","C_BUS_WRITE_8_VAL","C_BUS_WRITE_16_VAL","C_BUS_WRITE_32_VAL","C_BUS_INTERRUPT_VAL","RAM_DEV_KEY","RAM_SIZE_IN_BYTE","Clk","EventTarget","constructor","TICKER","CYCLE","CYCLE_START_EVENTS","CYCLE_END_EVENTS","STATE","SPEED","_trigger_observers","bind","start","dispatchEvent","Event","setInterval","stop","clearInterval","pause","resume","step","setTimeout","changeSpeed","val","CustomEvent","detail","length","Ram","START_ADDRESS","BUFFER","DataView","ArrayBuffer","read8","byteOffset","getUint8","read16","getUint16","read32","getUint32","write8","setUint8","write16","setUint16","write32","setUint32","getByteLength","byteLength","view","Symbol","iterator","index","next","binStr","toString","binStr32","padStart","value","done","Buffer32Bit","name","NAME","IS_EMPTY","read","write","flush","join","Bus","dev","DEVICES","A_BUS_BUFFER","C_BUS_BUFFER","D_BUS_BUFFER","onTick","setAddress","setControl","setData","getData","data","address","control","device","console","log","Cpu","parts","ALU","alu","DEC","dec","BUS","bus","REG","reg","MMU","mmu","CLK","clk","CURRENT_PID","CURRENT_INSTRUCTION","ALU_ROUTINE","conn2bus","conn2reg","_fetch","_decode","_execute","addEventListener","run","spawn","pid","pc","for","PROC_START_ADDRESS","sp","STACK_SEC_START_ADDRESS","load","elf","processAlloc","procSize","extELF","malloc","envSize","envContent","undefined","textSize","textContent","initDataSize","initDataContent","bssSize","bssContent","TEXT_SEC_END_ADDRESS","translate","instruction","aluRoutine","decode","call","routine","virtualAddress","Reg","_r1","_r2","_r3","_r4","_r5","_r6","_r7","_r8","_r9","_r10","_r11","_r12","_sp","_lr","_pc","_cpsr","_readEventHandler","_writeEventHandler","r1","r2","r3","r4","r5","r6","r7","r8","r9","r10","r11","r12","lr","cpsr","registers","Process","startAddr","endAddr","PID","PROC_END_ADDRESS","set","section","size","ENV_START_ADDRESS","ENV_END_ADDRESS","STACK_SEC_END_ADDRESS","HEAP_START_ADDRESS","BSS_SEC_END_ADDRESS","HEAP_END_ADDRESS","BSS_SEC_START_ADDRESS","INIT_DATA_SEC_END_ADDRESS","INIT_DATA_SEC_START_ADDRESS","TEXT_SEC_START_ADDRESS","fletcher16","sum1","sum2","i","charCodeAt","Mmu","PROCESSES","Map","RAM","PAGE_TABLE","proc","get","content","contentChecksums","len","entry","virtualAddr","physicalAddr","_lookup","push","Dec","INSTRUCTION","T0","T1","T12","T14","T18","T181","T182","T184","T185","T2","T3","T5","T53","_T0","_any","_lup","fName","_ret","code","_ne","v1","v2","_eq","_neC","v2str","v1len","curV1","curV2","_eqC","cond","op0","op1","cond_func","cond_v1","op0_func","op0_v1","op1_func","op1_v1","fields","every","v","caller","callee","_T1","op2","op3","op4","op2_func","op2_v1","op3_func","op3_v1","op4_func","op4_v1","_T2","p","w","PW","o2","o1","Rn","PW_func","PW_v1","o2_func","o2_v1","o1_func","o1_v1","Rn_func","Rn_v1","_T3","P","W","P_func","P_v1","W_func","W_v1","_T5","_T12","opc","S","opc_func","opc_v1","S_func","S_v1","_T14","_T16","_T17","_T18","_T181","_T182","H","H_func","H_v1","_T184","_T185","_T53","Alu","Math","floor","random","ceil","checkSum","ram","DEF","cpu"],"mappings":"AAAA;AACO,MAAMA,QAAQ,GAAG,OAAO,CAAA;AACxB,MAAMC,OAAO,GAAG,MAAM,CAAA;AACtB,MAAMC,QAAQ,GAAG,OAAO,CAAA;AACxB,MAAMC,SAAS,GAAG,QAAQ,CAAA;AAC1B,MAAMC,OAAO,GAAG,MAAM,CAAA;AACtB,MAAMC,eAAe,GAAG,cAAc,CAAA;AACtC,MAAMC,YAAY,GAAG,WAAW,CAAA;AAChC,MAAMC,WAAW,GAAG,UAAU,CAAA;AAC9B,MAAMC,kBAAkB,GAAG,iBAAiB,CAAA;AAC5C,MAAMC,iBAAiB,GAAG,gBAAgB,CAAA;AAC1C,MAAMC,oBAAoB,GAAG,mBAAmB,CAAA;AAChD,MAAMC,qBAAqB,GAAG,oBAAoB,CAAA;AAClD,MAAMC,sBAAsB,GAAG,qBAAqB,CAAA;AACpD,MAAMC,kBAAkB,GAAG,iBAAiB,CAAA;AAC5C,MAAMC,mBAAmB,GAAG,kBAAkB,CAAA;AAC9C,MAAMC,oBAAoB,GAAG,mBAAmB,CAAA;AAChD,MAAMC,YAAY,GAAG,WAAW,CAAA;AAChC,MAAMC,WAAW,GAAG,UAAU,CAAA;AAC9B,MAAMC,cAAc,GAAG,aAAa,CAAA;;AAE3C;AACO,MAAMC,WAAW,GAAG,aAAa,CAAA;AACjC,MAAMC,aAAa,GAAG,eAAe,CAAA;AACrC,MAAMC,YAAY,GAAG,cAAc,CAAA;AACnC,MAAMC,WAAW,GAAG,aAAa,CAAA;AACjC,MAAMC,iBAAiB,GAAG,mBAAmB,CAAA;AAC7C,MAAMC,YAAY,GAAG,cAAc,CAAA;;AAE1C;AACO,MAAMC,OAAO,GAAG,CAAC,CAAC;AAClB,MAAMC,UAAU,GAAG,CAAC,CAAC;;AAE5B;AACO,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzB,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,eAAe,GAAG,CAAC,CAAC;;AAEjC;AACO,MAAMC,gBAAgB,GAAG,GAAG,CAAC;AAC7B,MAAMC,kBAAkB,GAAG,GAAG,CAAC;AAC/B,MAAMC,gBAAgB,GAAG,IAAI,CAAC;;AAErC;AACO,MAAMC,gBAAgB,GAAG,kCAAkC,CAAC;AAC5D,MAAMC,iBAAiB,GAAG,kCAAkC,CAAC;AAC7D,MAAMC,iBAAiB,GAAG,kCAAkC,CAAC;AAC7D,MAAMC,iBAAiB,GAAG,kCAAkC,CAAC;AAC7D,MAAMC,kBAAkB,GAAG,kCAAkC,CAAC;AAC9D,MAAMC,kBAAkB,GAAG,kCAAkC,CAAC;AAC9D,MAAMC,mBAAmB,GAAG,kCAAkC,CAAC;;AAEtE;AACO,MAAMC,WAAW,GAAG,kCAAkC,CAAA;;AAE7D;AACO,MAAMC,gBAAgB,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCjD;AACA;AACA;AACA;AACA;AACO,MAAMC,GAAG,SAASC,WAAW,CAAC;AACnC;AACF;AACA;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ,IAAA,KAAK,EAAE,CAAA;;AAEP;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAG,IAAI,CAAA;;AAElB;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAG,CAAC,CAAA;;AAEd;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,kBAAkB,GAAG,CACxBrC,oBAAoB,EACpBC,qBAAqB,EACrBC,sBAAsB,CACvB,CAAA;;AAED;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACoC,gBAAgB,GAAG,CACtBnC,kBAAkB,EAClBC,mBAAmB,EACnBC,oBAAoB,CACrB,CAAA;;AAED;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACkC,KAAK,GAAGtB,cAAc,CAAA;;AAE3B;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACuB,KAAK,GAAGnB,kBAAkB,CAAA;IAE/B,IAAI,CAACoB,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC9D,GAAA;;AAEA;AACF;AACA;AACA;AACEC,EAAAA,KAAK,GAAG;AACN,IAAA,IAAI,IAAI,CAACJ,KAAK,KAAKrB,eAAe,EAAE;MAClC,IAAI,CAACqB,KAAK,GAAGrB,eAAe,CAAA;MAC5B,IAAI,CAAC0B,aAAa,CAAC,IAAIC,KAAK,CAACvD,QAAQ,CAAC,CAAC,CAAA;AACvC,MAAA,IAAI,CAAC6C,MAAM,GAAGW,WAAW,CAAC,IAAI,CAACL,kBAAkB,EAAE,IAAI,CAACD,KAAK,CAAC,CAAA;AAChE,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEO,EAAAA,IAAI,GAAG;AACL,IAAA,IAAI,IAAI,CAACR,KAAK,KAAKtB,cAAc,EAAE;AACjC+B,MAAAA,aAAa,CAAC,IAAI,CAACb,MAAM,CAAC,CAAA;MAC1B,IAAI,CAACC,KAAK,GAAG,CAAC,CAAA;MACd,IAAI,CAACA,KAAK,GAAG,CAAC,CAAA;MACd,IAAI,CAACD,MAAM,GAAG,IAAI,CAAA;MAClB,IAAI,CAACI,KAAK,GAAGtB,cAAc,CAAA;MAC3B,IAAI,CAAC2B,aAAa,CAAC,IAAIC,KAAK,CAACtD,OAAO,CAAC,CAAC,CAAA;AACxC,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACE0D,EAAAA,KAAK,GAAG;AACN,IAAA,IAAI,IAAI,CAACV,KAAK,KAAKpB,eAAe,EAAE;AAClC6B,MAAAA,aAAa,CAAC,IAAI,CAACb,MAAM,CAAC,CAAA;MAC1B,IAAI,CAACA,MAAM,GAAG,IAAI,CAAA;MAClB,IAAI,CAACI,KAAK,GAAGpB,eAAe,CAAA;MAC5B,IAAI,CAACyB,aAAa,CAAC,IAAIC,KAAK,CAACrD,QAAQ,CAAC,CAAC,CAAA;AACzC,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACE0D,EAAAA,MAAM,GAAG;AACP,IAAA,IAAI,IAAI,CAACX,KAAK,KAAKpB,eAAe,EAAE;MAClC,IAAI,CAACoB,KAAK,GAAGrB,eAAe,CAAA;MAC5B,IAAI,CAAC0B,aAAa,CAAC,IAAIC,KAAK,CAACpD,SAAS,CAAC,CAAC,CAAA;AACxC,MAAA,IAAI,CAAC0C,MAAM,GAAGW,WAAW,CAAC,IAAI,CAACL,kBAAkB,EAAE,IAAI,CAACD,KAAK,CAAC,CAAA;AAChE,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEW,EAAAA,IAAI,GAAG;AACL,IAAA,IAAI,IAAI,CAACZ,KAAK,KAAKpB,eAAe,EAAE;MAClC,IAAI,CAACoB,KAAK,GAAGrB,eAAe,CAAA;MAC5B,IAAI,CAAC0B,aAAa,CAAC,IAAIC,KAAK,CAACnD,OAAO,CAAC,CAAC,CAAA;AACtC0D,MAAAA,UAAU,CAAC,MAAM;QACf,IAAI,CAACX,kBAAkB,EAAE,CAAA;AACzBW,QAAAA,UAAU,CAAC,MAAM;UACf,IAAI,CAACX,kBAAkB,EAAE,CAAA;AACzBW,UAAAA,UAAU,CAAC,MAAM;YACf,IAAI,CAACX,kBAAkB,EAAE,CAAA;YACzB,IAAI,CAACQ,KAAK,EAAE,CAAA;AACd,WAAC,EAAE,IAAI,CAACT,KAAK,CAAC,CAAA;AAChB,SAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAA;AAChB,OAAC,EAAE,IAAI,CAACA,KAAK,CAAC,CAAA;AAChB,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACEa,WAAW,CAACC,GAAG,EAAE;IACf,IAAI,CAACd,KAAK,GAAGc,GAAG,CAAA;IAChB,IAAI,IAAI,CAACnB,MAAM,EAAE;AACfa,MAAAA,aAAa,CAAC,IAAI,CAACb,MAAM,CAAC,CAAA;AAC1B,MAAA,IAAI,CAACA,MAAM,GAAGW,WAAW,CAAC,IAAI,CAACL,kBAAkB,EAAE,IAAI,CAACD,KAAK,CAAC,CAAA;AAChE,KAAA;AACA,IAAA,IAAI,CAACI,aAAa,CAChB,IAAIW,WAAW,CAAC5D,eAAe,EAAE;MAAE6D,MAAM,EAAE,IAAI,CAAChB,KAAAA;AAAM,KAAC,CAAC,CACzD,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACEC,EAAAA,kBAAkB,GAAG;AACnB;AACA,IAAA,IAAI,CAACG,aAAa,CAAC,IAAIC,KAAK,CAAC,IAAI,CAACR,kBAAkB,CAAC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAAA;AAClE,IAAA,IAAI,CAACQ,aAAa,CAAC,IAAIC,KAAK,CAAC,IAAI,CAACP,gBAAgB,CAAC,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAAA;IAChE,IAAI,CAACA,KAAK,GACR,IAAI,CAACA,KAAK,GAAG,IAAI,CAACC,kBAAkB,CAACoB,MAAM,GAAG,CAAC,GAAG,IAAI,CAACrB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAA;AACxE,GAAA;AACF;;ACxLA;AACA;AACA;AACA;AACO,MAAMsB,GAAG,SAASzB,WAAW,CAAC;AACnC;AACF;AACA;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ,IAAA,KAAK,EAAE,CAAA;IAEP,IAAI,CAACyB,aAAa,GAAG,CAAC,CAAA;AAEtB,IAAA,IAAI,CAACC,MAAM,GAAG,IAAIC,QAAQ,CACxB,IAAIC,WAAW,CAAC/B,gBAAgB,CAAC,EACjC,IAAI,CAAC4B,aAAa,CACnB,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEI,EAAAA,KAAK,CAACC,UAAU,GAAG,CAAC,EAAE;IACpB,MAAMV,GAAG,GAAG,IAAI,CAACM,MAAM,CAACK,QAAQ,CAACD,UAAU,CAAC,CAAA;IAC5C,IAAI,CAACpB,aAAa,CAAC,IAAIC,KAAK,CAAChD,WAAW,CAAC,CAAC,CAAA;AAC1C,IAAA,OAAOyD,GAAG,CAAA;AACZ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEY,EAAAA,MAAM,CAACF,UAAU,GAAG,CAAC,EAAE;IACrB,MAAMV,GAAG,GAAG,IAAI,CAACM,MAAM,CAACO,SAAS,CAACH,UAAU,CAAC,CAAA;IAC7C,IAAI,CAACpB,aAAa,CAAC,IAAIC,KAAK,CAAChD,WAAW,CAAC,CAAC,CAAA;AAC1C,IAAA,OAAOyD,GAAG,CAAA;AACZ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEc,EAAAA,MAAM,CAACJ,UAAU,GAAG,CAAC,EAAE;IACrB,MAAMV,GAAG,GAAG,IAAI,CAACM,MAAM,CAACS,SAAS,CAACL,UAAU,CAAC,CAAA;IAC7C,IAAI,CAACpB,aAAa,CAAC,IAAIC,KAAK,CAAChD,WAAW,CAAC,CAAC,CAAA;AAC1C,IAAA,OAAOyD,GAAG,CAAA;AACZ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEgB,EAAAA,MAAM,CAAChB,GAAG,EAAEU,UAAU,GAAG,CAAC,EAAE;IAC1B,IAAI,CAACJ,MAAM,CAACW,QAAQ,CAACP,UAAU,EAAEV,GAAG,CAAC,CAAA;IACrC,IAAI,CAACV,aAAa,CAAC,IAAIC,KAAK,CAACjD,YAAY,CAAC,CAAC,CAAA;AAC3C,IAAA,OAAOmB,OAAO,CAAA;AAChB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEyD,EAAAA,OAAO,CAAClB,GAAG,EAAEU,UAAU,GAAG,CAAC,EAAE;IAC3B,IAAI,CAACJ,MAAM,CAACa,SAAS,CAACT,UAAU,EAAEV,GAAG,CAAC,CAAA;IACtC,IAAI,CAACV,aAAa,CAAC,IAAIC,KAAK,CAACjD,YAAY,CAAC,CAAC,CAAA;AAC3C,IAAA,OAAOmB,OAAO,CAAA;AAChB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE2D,EAAAA,OAAO,CAACpB,GAAG,EAAEU,UAAU,GAAG,CAAC,EAAE;IAC3B,IAAI,CAACJ,MAAM,CAACe,SAAS,CAACX,UAAU,EAAEV,GAAG,CAAC,CAAA;IACtC,IAAI,CAACV,aAAa,CAAC,IAAIC,KAAK,CAACjD,YAAY,CAAC,CAAC,CAAA;AAC3C,IAAA,OAAOmB,OAAO,CAAA;AAChB,GAAA;;AAEA;AACF;AACA;AACA;AACE6D,EAAAA,aAAa,GAAG;AACd,IAAA,OAAO,IAAI,CAAChB,MAAM,CAACiB,UAAU,CAAA;AAC/B,GAAA;;AAEA;AACF;AACA;AACA;AACEC,EAAAA,IAAI,GAAG;IACL,OAAO,CAAC,GAAG,IAAI,CAAC,CAAA;AAClB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,CAACC,MAAM,CAACC,QAAQ,CAAI,GAAA;IAClB,IAAIC,KAAK,GAAG,CAAC,CAAA;IACb,OAAO;AACLC,MAAAA,IAAI,EAAE,MAAM;QACV,IAAID,KAAK,GAAGlD,gBAAgB,EAAE;AAC5B,UAAA,MAAMoD,MAAM,GAAG,IAAI,CAACvB,MAAM,CAACK,QAAQ,CAACgB,KAAK,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAA;UACtD,MAAMC,QAAQ,GAAGF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;AACxCL,UAAAA,KAAK,EAAE,CAAA;UACP,OAAO;AAAEM,YAAAA,KAAK,EAAEF,QAAQ;AAAEG,YAAAA,IAAI,EAAE,KAAA;WAAO,CAAA;AACzC,SAAC,MAAM;UACL,OAAO;AAAEA,YAAAA,IAAI,EAAE,IAAA;WAAM,CAAA;AACvB,SAAA;AACF,OAAA;KACD,CAAA;AACH,GAAA;AACF;;ACrIA;AACA;AACA;AACA;AACO,MAAMC,WAAW,SAASxD,WAAW,CAAC;AAC3C;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACwD,IAAI,EAAE;AAChB,IAAA,KAAK,EAAE,CAAA;;AAEP;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGD,IAAI,CAAA;;AAEhB;AACJ;AACA;AACA;IACI,IAAI,CAACE,QAAQ,GAAG7E,OAAO,CAAA;;AAEvB;AACJ;AACA;AACA;IACI,IAAI,CAAC6C,MAAM,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;AAChD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE+B,EAAAA,IAAI,CAAC7B,UAAU,GAAG,CAAC,EAAE;IACnB,MAAMV,GAAG,GAAG,IAAI,CAACM,MAAM,CAACS,SAAS,CAACL,UAAU,CAAC,CAAA;AAC7C,IAAA,IAAI,CAACpB,aAAa,CAAC,IAAIW,WAAW,CAACxD,iBAAiB,EAAE;AAAEyD,MAAAA,MAAM,EAAE,IAAA;AAAK,KAAC,CAAC,CAAC,CAAA;AACxE,IAAA,OAAOF,GAAG,CAAA;AACZ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEwC,EAAAA,KAAK,CAACxC,GAAG,EAAEU,UAAU,GAAG,CAAC,EAAE;IACzB,IAAI,CAACJ,MAAM,CAACe,SAAS,CAACX,UAAU,EAAEV,GAAG,CAAC,CAAA;IACtC,IAAI,CAACsC,QAAQ,GAAG5E,UAAU,CAAA;AAC1B,IAAA,IAAI,CAAC4B,aAAa,CAAC,IAAIW,WAAW,CAACzD,kBAAkB,EAAE;AAAE0D,MAAAA,MAAM,EAAE,IAAA;AAAK,KAAC,CAAC,CAAC,CAAA;AACzE,IAAA,OAAOzC,OAAO,CAAA;AAChB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEgF,EAAAA,KAAK,GAAG;IACN,IAAI,CAACnC,MAAM,CAACe,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAC3B,IAAI,CAACiB,QAAQ,GAAG7E,OAAO,CAAA;AACvB,IAAA,IAAI,CAAC6B,aAAa,CAAC,IAAIW,WAAW,CAACzD,kBAAkB,EAAE;AAAE0D,MAAAA,MAAM,EAAE,IAAA;AAAK,KAAC,CAAC,CAAC,CAAA;AACzE,IAAA,OAAOzC,OAAO,CAAA;AAChB,GAAA;;AAEA;AACF;AACA;AACA;AACE+D,EAAAA,IAAI,GAAG;IACL,OAAO,CAAC,GAAG,IAAI,CAAC,CAACkB,IAAI,CAAC,EAAE,CAAC,CAAA;AAC3B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,CAACjB,MAAM,CAACC,QAAQ,CAAI,GAAA;IAClB,IAAIC,KAAK,GAAG,CAAC,CAAA;AACb,IAAA,MAAME,MAAM,GAAG,IAAI,CAACvB,MAAM,CAACS,SAAS,CAAC,CAAC,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAA;IACnD,MAAMC,QAAQ,GAAGF,MAAM,CAACG,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAA;IACzC,OAAO;AACLJ,MAAAA,IAAI,EAAE,MAAM;AACV,QAAA,IAAID,KAAK,GAAGI,QAAQ,CAAC5B,MAAM,EAAE;UAC3B,OAAO;AAAE8B,YAAAA,KAAK,EAAEF,QAAQ,CAACJ,KAAK,EAAE,CAAC;AAAEO,YAAAA,IAAI,EAAE,KAAA;WAAO,CAAA;AAClD,SAAC,MAAM;UACL,OAAO;AAAEA,YAAAA,IAAI,EAAE,IAAA;WAAM,CAAA;AACvB,SAAA;AACF,OAAA;KACD,CAAA;AACH,GAAA;AACF;;AC7FA;AACA;AACA;AACA;AACO,MAAMS,GAAG,CAAC;AACf;AACF;AACA;AACA;AACA;EACE/D,WAAW,CAACgE,GAAG,EAAE;AACf;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGD,GAAG,CAAA;;AAElB;AACJ;AACA;AACA;AACI,IAAA,IAAI,CAACE,YAAY,GAAG,IAAIX,WAAW,CAAC,aAAa,CAAC,CAAA;;AAElD;AACJ;AACA;AACA;AACI,IAAA,IAAI,CAACY,YAAY,GAAG,IAAIZ,WAAW,CAAC,aAAa,CAAC,CAAA;;AAElD;AACJ;AACA;AACA;AACI,IAAA,IAAI,CAACa,YAAY,GAAG,IAAIb,WAAW,CAAC,UAAU,CAAC,CAAA;IAE/C,IAAI,CAACc,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC7D,IAAI,CAAC,IAAI,CAAC,CAAA;AACtC,GAAA;;AAEA;AACF;AACA;AACA;EACE8D,UAAU,CAAClD,GAAG,EAAE;AACd;AACA,IAAA,IAAI,CAAC8C,YAAY,CAACN,KAAK,CAACxC,GAAG,CAAC,CAAA;AAC9B,GAAA;;AAEA;AACF;AACA;AACA;EACEmD,UAAU,CAACnD,GAAG,EAAE;AACd,IAAA,IAAI,CAAC+C,YAAY,CAACP,KAAK,CAACxC,GAAG,CAAC,CAAA;AAC9B,GAAA;;AAEA;AACF;AACA;AACA;EACEoD,OAAO,CAACpD,GAAG,EAAE;AACX,IAAA,IAAI,CAACgD,YAAY,CAACR,KAAK,CAACxC,GAAG,CAAC,CAAA;AAC9B,GAAA;;AAEA;AACF;AACA;AACA;AACEqD,EAAAA,OAAO,GAAG;AACR,IAAA,MAAMC,IAAI,GAAG,IAAI,CAACN,YAAY,CAACT,IAAI,EAAE,CAAA;AACrC,IAAA,IAAI,CAACS,YAAY,CAACP,KAAK,EAAE,CAAA;AACzB,IAAA,OAAOa,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACE9B,EAAAA,IAAI,GAAG;IACL,OAAO;AACL+B,MAAAA,OAAO,EAAE,IAAI,CAACT,YAAY,CAACtB,IAAI,EAAE;AACjC8B,MAAAA,IAAI,EAAE,IAAI,CAACN,YAAY,CAACxB,IAAI,EAAE;AAC9BgC,MAAAA,OAAO,EAAE,IAAI,CAACT,YAAY,CAACvB,IAAI,EAAA;KAChC,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEyB,EAAAA,MAAM,GAAG;AACP,IAAA,IAAI,IAAI,CAACH,YAAY,CAACR,QAAQ,EAAE,OAAA;IAChC,MAAMmB,MAAM,GACV,IAAI,CAACZ,OAAO,CAAC,IAAI,CAACC,YAAY,CAACP,IAAI,EAAE,GAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAK,EAAE,KAAM,CAAE,CAAC,CAAA;IACzE,MAAM7B,UAAU,GAAG,IAAI,CAACoC,YAAY,CAACP,IAAI,EAAE,GAAG/D,WAAW,CAAA;;AAEzD;IACA,IAAI,EAAE,IAAI,CAACuE,YAAY,CAACR,IAAI,EAAE,GAAGtE,gBAAgB,CAAC,EAAE;MAClD,IAAI,CAAC+E,YAAY,CAACR,KAAK,CAACiB,MAAM,CAAChD,KAAK,CAACC,UAAU,CAAC,CAAC,CAAA;AACnD,KAAA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGrE,iBAAiB,CAAC,EAAE;MACnD,IAAI,CAAC8E,YAAY,CAACR,KAAK,CAACiB,MAAM,CAAC7C,MAAM,CAACF,UAAU,CAAC,CAAC,CAAA;AACpD,KAAA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGpE,iBAAiB,CAAC,EAAE;MACnD,IAAI,CAAC6E,YAAY,CAACR,KAAK,CAACiB,MAAM,CAAC3C,MAAM,CAACJ,UAAU,CAAC,CAAC,CAAA;AACpD,KAAA;;AAEA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGnE,iBAAiB,CAAC,EAAE;MACnDqF,MAAM,CAACzC,MAAM,CAAC,IAAI,CAACgC,YAAY,CAACT,IAAI,EAAE,EAAE7B,UAAU,CAAC,CAAA;AACrD,KAAA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGlE,kBAAkB,CAAC,EAAE;MACpDoF,MAAM,CAACvC,OAAO,CAAC,IAAI,CAAC8B,YAAY,CAACT,IAAI,EAAE,EAAE7B,UAAU,CAAC,CAAA;AACtD,KAAA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGjE,kBAAkB,CAAC,EAAE;MACpDmF,MAAM,CAACrC,OAAO,CAAC,IAAI,CAAC4B,YAAY,CAACT,IAAI,EAAE,EAAE7B,UAAU,CAAC,CAAA;AACtD,KAAA;;AAEA;IACA,IAAI,EAAE,IAAI,CAACqC,YAAY,CAACR,IAAI,EAAE,GAAGhE,mBAAmB,CAAC,EAAE;AACrDmF,MAAAA,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAAA;AACpD,KAAA;AAEA,IAAA,IAAI,CAACb,YAAY,CAACL,KAAK,EAAE,CAAA;AAC3B,GAAA;AACF;;;;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMmB,GAAG,CAAC;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhF,WAAW,CAACiF,KAAK,EAAE;AACjB,IAAA,IAAI,CAACC,GAAG,GAAGD,KAAK,CAACE,GAAG,CAAA;AACpB,IAAA,IAAI,CAACC,GAAG,GAAGH,KAAK,CAACI,GAAG,CAAA;AACpB,IAAA,IAAI,CAACC,GAAG,GAAGL,KAAK,CAACM,GAAG,CAAA;AACpB,IAAA,IAAI,CAACC,GAAG,GAAGP,KAAK,CAACQ,GAAG,CAAA;AACpB,IAAA,IAAI,CAACC,GAAG,GAAGT,KAAK,CAACU,GAAG,CAAA;AACpB,IAAA,IAAI,CAACC,GAAG,GAAGX,KAAK,CAACY,GAAG,CAAA;IAEpB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAA;IACpB,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAAA;IAC/B,IAAI,CAACC,WAAW,GAAG,IAAI,CAAA;IAEvB,IAAI,CAACN,GAAG,CAACO,QAAQ,CAAC,IAAI,CAACX,GAAG,CAAC,CAAA;IAC3B,IAAI,CAACJ,GAAG,CAACgB,QAAQ,CAAC,IAAI,CAACV,GAAG,CAAC,CAAA;IAE3B,IAAI,CAACW,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC3F,IAAI,CAAC,IAAI,CAAC,CAAA;IACpC,IAAI,CAAC4F,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC5F,IAAI,CAAC,IAAI,CAAC,CAAA;IACtC,IAAI,CAAC6F,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC7F,IAAI,CAAC,IAAI,CAAC,CAAA;IAExC,IAAI,CAACoF,GAAG,CAACU,gBAAgB,CAACxI,oBAAoB,EAAE,IAAI,CAACqI,MAAM,CAAC,CAAA;IAC5D,IAAI,CAACP,GAAG,CAACU,gBAAgB,CAACvI,qBAAqB,EAAE,IAAI,CAACqI,OAAO,CAAC,CAAA;IAC9D,IAAI,CAACR,GAAG,CAACU,gBAAgB,CAACtI,sBAAsB,EAAE,IAAI,CAACqI,QAAQ,CAAC,CAAA;AAEhE,IAAA,IAAI,CAACT,GAAG,CAACU,gBAAgB,CAACxI,oBAAoB,EAAE,IAAI,CAACwH,GAAG,CAACjB,MAAM,CAAC,CAAA;AAChE,IAAA,IAAI,CAACuB,GAAG,CAACU,gBAAgB,CAACvI,qBAAqB,EAAE,IAAI,CAACuH,GAAG,CAACjB,MAAM,CAAC,CAAA;AACjE,IAAA,IAAI,CAACuB,GAAG,CAACU,gBAAgB,CAACtI,sBAAsB,EAAE,IAAI,CAACsH,GAAG,CAACjB,MAAM,CAAC,CAAA;AACpE,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEkC,EAAAA,GAAG,GAAG;AACJ,IAAA,IAAI,CAACX,GAAG,CAACnF,KAAK,EAAE,CAAA;AAChB,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;;EAEE+F,KAAK,CAACC,GAAG,EAAE;AACT,IAAA,IAAI,CAACjB,GAAG,CAACkB,EAAE,CAAC9C,KAAK,CAAC,IAAI,CAAC8B,GAAG,CAACiB,GAAG,CAACF,GAAG,CAAC,CAACG,kBAAkB,CAAC,CAAA;AACvD,IAAA,IAAI,CAACpB,GAAG,CAACqB,EAAE,CAACjD,KAAK,CAAC,IAAI,CAAC8B,GAAG,CAACiB,GAAG,CAACF,GAAG,CAAC,CAACK,uBAAuB,CAAC,CAAA;IAC5D,IAAI,CAAChB,WAAW,GAAGW,GAAG,CAAA;AACtB,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,IAAI,CAACC,GAAG,EAAE;IACR,MAAMP,GAAG,GAAG,IAAI,CAACf,GAAG,CAACuB,YAAY,CAACD,GAAG,CAACE,QAAQ,CAAC,CAAA;IAC/C,MAAMC,MAAM,gBAAQH,GAAG,EAAA;AAAEP,MAAAA,GAAAA;KAAK,CAAA,CAAA;;AAE9B;IACAU,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAACzB,GAAG,CAAC0B,MAAM,CAClCX,GAAG,EACHlI,WAAW,EACXyI,GAAG,CAACK,OAAO,EACXL,GAAG,CAACM,UAAU,CACf,CAAA;AACD,IAAA,IAAI,CAAC5B,GAAG,CAAC0B,MAAM,CAACX,GAAG,EAAEjI,aAAa,EAAE+I,SAAS,EAAE,EAAE,CAAC,CAAA;IAClDJ,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAACzB,GAAG,CAAC0B,MAAM,CACnCX,GAAG,EACH7H,YAAY,EACZoI,GAAG,CAACQ,QAAQ,EACZR,GAAG,CAACS,WAAW,CAChB,CAAA;IACDN,MAAM,CAAC,eAAe,CAAC,GAAG,IAAI,CAACzB,GAAG,CAAC0B,MAAM,CACvCX,GAAG,EACH9H,iBAAiB,EACjBqI,GAAG,CAACU,YAAY,EAChBV,GAAG,CAACW,eAAe,CACpB,CAAA;IACDR,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAACzB,GAAG,CAAC0B,MAAM,CAClCX,GAAG,EACH/H,WAAW,EACXsI,GAAG,CAACY,OAAO,EACXZ,GAAG,CAACa,UAAU,CACf,CAAA;AACD,IAAA,IAAI,CAACnC,GAAG,CAAC0B,MAAM,CAACX,GAAG,EAAEhI,YAAY,EAAE8I,SAAS,EAAE,EAAE,CAAC,CAAA;AACjD,IAAA,OAAOJ,MAAM,CAAA;AACf,GAAA;;AAEA;AACF;AACA;AACA;AACEhB,EAAAA,MAAM,GAAG;IACP,IACE,IAAI,CAACX,GAAG,CAACkB,EAAE,CAAC/C,IAAI,EAAE,GAAG,IAAI,CAAC+B,GAAG,CAACiB,GAAG,CAAC,IAAI,CAACb,WAAW,CAAC,CAACgC,oBAAoB,EACxE;MACA,MAAMpB,EAAE,GAAG,IAAI,CAAClB,GAAG,CAACkB,EAAE,CAAC/C,IAAI,EAAE,CAAA;AAC7B,MAAA,IAAI,CAAC2B,GAAG,CAAChB,UAAU,CAAC,IAAI,CAACoB,GAAG,CAACqC,SAAS,CAACrB,EAAE,CAAC,CAAC,CAAA;AAC3C,MAAA,IAAI,CAACpB,GAAG,CAACf,UAAU,CAAChF,iBAAiB,CAAC,CAAA;MACtC,IAAI,CAACiG,GAAG,CAACkB,EAAE,CAAC9C,KAAK,CAAC8C,EAAE,GAAG,CAAC,CAAC,CAAA;AAC3B,KAAC,MAAM;AACL,MAAA,IAAI,CAACd,GAAG,CAAC/E,IAAI,EAAE,CAAA;AACjB,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACEuF,EAAAA,OAAO,GAAG;IACR,MAAM;MAAE4B,WAAW;AAAEC,MAAAA,UAAAA;AAAW,KAAC,GAAG,IAAI,CAAC7C,GAAG,CAAC8C,MAAM,CAAC,IAAI,CAAC5C,GAAG,CAACb,OAAO,EAAE,CAAC,CAAA;IACvE,IAAI,CAACsB,mBAAmB,GAAGiC,WAAW,CAAA;IACtC,IAAI,CAAChC,WAAW,GAAGiC,UAAU,CAAA;AAC/B,GAAA;;AAEA;AACF;AACA;AACA;AACE5B,EAAAA,QAAQ,GAAG;AACT,IAAA,IAAI,CAACnB,GAAG,CAACiD,IAAI,CAAC;MACZ1B,GAAG,EAAE,IAAI,CAACX,WAAW;MACrBsC,OAAO,EAAE,IAAI,CAACpC,WAAW;MACzBgC,WAAW,EAAE,IAAI,CAACjC,mBAAmB;MACrCsC,cAAc,EAAE,IAAI,CAAC7C,GAAG,CAACkB,EAAE,CAAC/C,IAAI,EAAE,GAAG,CAAA;AACvC,KAAC,CAAC,CAAA;AACJ,GAAA;AACF;;ACtKA;AACA;AACA;AACA;AACO,MAAM2E,GAAG,SAASvI,WAAW,CAAC;AACnC;AACF;AACA;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ,IAAA,KAAK,EAAE,CAAA;AAEP,IAAA,IAAI,CAACuI,GAAG,GAAG,IAAIhF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACiF,GAAG,GAAG,IAAIjF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACkF,GAAG,GAAG,IAAIlF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACmF,GAAG,GAAG,IAAInF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACoF,GAAG,GAAG,IAAIpF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACqF,GAAG,GAAG,IAAIrF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACsF,GAAG,GAAG,IAAItF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACuF,GAAG,GAAG,IAAIvF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACwF,GAAG,GAAG,IAAIxF,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAACyF,IAAI,GAAG,IAAIzF,WAAW,CAAC,KAAK,CAAC,CAAA;AAClC,IAAA,IAAI,CAAC0F,IAAI,GAAG,IAAI1F,WAAW,CAAC,KAAK,CAAC,CAAA;AAClC,IAAA,IAAI,CAAC2F,IAAI,GAAG,IAAI3F,WAAW,CAAC,KAAK,CAAC,CAAA;AAClC,IAAA,IAAI,CAAC4F,GAAG,GAAG,IAAI5F,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAAC6F,GAAG,GAAG,IAAI7F,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAAC8F,GAAG,GAAG,IAAI9F,WAAW,CAAC,IAAI,CAAC,CAAA;AAChC,IAAA,IAAI,CAAC+F,KAAK,GAAG,IAAI/F,WAAW,CAAC,MAAM,CAAC,CAAA;IAEpC,IAAI,CAACgG,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAAC/I,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1D,IAAI,CAACgJ,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAAChJ,IAAI,CAAC,IAAI,CAAC,CAAA;IAE5D,IAAI,CAAC+H,GAAG,CAACjC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACf,GAAG,CAAClC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACd,GAAG,CAACnC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACb,GAAG,CAACpC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACZ,GAAG,CAACrC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACX,GAAG,CAACtC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACV,GAAG,CAACvC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACT,GAAG,CAACxC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACR,GAAG,CAACzC,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACP,IAAI,CAAC1C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACrE,IAAI,CAACN,IAAI,CAAC3C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACrE,IAAI,CAACL,IAAI,CAAC5C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACrE,IAAI,CAACJ,GAAG,CAAC7C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACH,GAAG,CAAC9C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACF,GAAG,CAAC/C,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IACpE,IAAI,CAACD,KAAK,CAAChD,gBAAgB,CAACzI,iBAAiB,EAAE,IAAI,CAAC0L,iBAAiB,CAAC,CAAA;IAEtE,IAAI,CAAChB,GAAG,CAACjC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAAChB,GAAG,CAAClC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACf,GAAG,CAACnC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACd,GAAG,CAACpC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACb,GAAG,CAACrC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACZ,GAAG,CAACtC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACX,GAAG,CAACvC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACV,GAAG,CAACxC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACT,GAAG,CAACzC,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACR,IAAI,CAAC1C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACvE,IAAI,CAACP,IAAI,CAAC3C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACvE,IAAI,CAACN,IAAI,CAAC5C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACvE,IAAI,CAACL,GAAG,CAAC7C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACJ,GAAG,CAAC9C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACH,GAAG,CAAC/C,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;IACtE,IAAI,CAACF,KAAK,CAAChD,gBAAgB,CAAC1I,kBAAkB,EAAE,IAAI,CAAC4L,kBAAkB,CAAC,CAAA;AAC1E,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAIC,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,EAAE,GAAG;IACP,OAAO,IAAI,CAAClB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,GAAG,GAAG;IACR,OAAO,IAAI,CAAClB,IAAI,CAAA;AAClB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,GAAG,GAAG;IACR,OAAO,IAAI,CAAClB,IAAI,CAAA;AAClB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAImB,GAAG,GAAG;IACR,OAAO,IAAI,CAAClB,IAAI,CAAA;AAClB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAIrC,EAAE,GAAG;IACP,OAAO,IAAI,CAACsC,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAIkB,EAAE,GAAG;IACP,OAAO,IAAI,CAACjB,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACE,EAAA,IAAI1C,EAAE,GAAG;IACP,OAAO,IAAI,CAAC2C,GAAG,CAAA;AACjB,GAAA;;AAEA;AACF;AACA;AACA;AACE,EAAA,IAAIiB,IAAI,GAAG;IACT,OAAO,IAAI,CAAChB,KAAK,CAAA;AACnB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,CAAC;AAAEjI,IAAAA,MAAAA;AAAO,GAAC,EAAE;AAC5B,IAAA,IAAI,CAACZ,aAAa,CAAC,IAAIW,WAAW,CAAChD,WAAW,EAAE;AAAEiD,MAAAA,MAAAA;AAAO,KAAC,CAAC,CAAC,CAAA;AAC9D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEkI,EAAAA,kBAAkB,CAAC;AAAElI,IAAAA,MAAAA;AAAO,GAAC,EAAE;AAC7B,IAAA,IAAI,CAACZ,aAAa,CAAC,IAAIW,WAAW,CAACjD,YAAY,EAAE;AAAEkD,MAAAA,MAAAA;AAAO,KAAC,CAAC,CAAC,CAAA;AAC/D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAACuB,MAAM,CAACC,QAAQ,CAAI,GAAA;AAClB,IAAA,MAAMyH,SAAS,GAAG,CAChB,IAAI,CAACd,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,EAAE,EACP,IAAI,CAACC,GAAG,EACR,IAAI,CAACC,GAAG,EACR,IAAI,CAACC,GAAG,EACR,IAAI,CAACvD,EAAE,EACP,IAAI,CAACwD,EAAE,EACP,IAAI,CAAC3D,EAAE,EACP,IAAI,CAAC4D,IAAI,CACV,CAAA;IACD,IAAIvH,KAAK,GAAG,CAAC,CAAA;IACb,OAAO;AACLC,MAAAA,IAAI,EAAE,MAAM;AACV,QAAA,IAAID,KAAK,GAAGwH,SAAS,CAAChJ,MAAM,EAAE;UAC5B,OAAO;AAAE8B,YAAAA,KAAK,EAAEkH,SAAS,CAACxH,KAAK,EAAE,CAAC;AAAEO,YAAAA,IAAI,EAAE,KAAA;WAAO,CAAA;AACnD,SAAC,MAAM;UACL,OAAO;AAAEA,YAAAA,IAAI,EAAE,IAAA;WAAM,CAAA;AACvB,SAAA;AACF,OAAA;KACD,CAAA;AACH,GAAA;AACF;;AC3OA;;AAEO,MAAMkH,OAAO,CAAC;AACnBxK,EAAAA,WAAW,CAACyG,GAAG,EAAEgE,SAAS,EAAEC,OAAO,EAAE;IACnC,IAAI,CAACC,GAAG,GAAGlE,GAAG,CAAA;IAEd,IAAI,CAACG,kBAAkB,GAAG6D,SAAS,CAAA;IACnC,IAAI,CAACG,gBAAgB,GAAGF,OAAO,CAAA;;AAE/B;AACA;AACF,GAAA;;AAEAG,EAAAA,GAAG,CAACC,OAAO,EAAEC,IAAI,EAAE;AACjB,IAAA,QAAQD,OAAO;AACb,MAAA,KAAKvM,WAAW;AACd,QAAA,IAAI,CAACyM,iBAAiB,GAAG,IAAI,CAACJ,gBAAgB,GAAGG,IAAI,CAAA;AACrD,QAAA,IAAI,CAACE,eAAe,GAAG,IAAI,CAACL,gBAAgB,CAAA;QAC5C,OAAO,IAAI,CAACI,iBAAiB,CAAA;AAE/B,MAAA,KAAKxM,aAAa;AAChB,QAAA,IAAI,CAACsI,uBAAuB,GAAG,IAAI,CAACkE,iBAAiB,GAAG,CAAC,CAAA;AACzD,QAAA,IAAI,CAACE,qBAAqB,GAAG,IAAI,CAACF,iBAAiB,GAAG,CAAC,CAAA;QACvD,OAAO,IAAI,CAAClE,uBAAuB,CAAA;AAErC,MAAA,KAAKrI,YAAY;AACf,QAAA,IAAI,CAAC0M,kBAAkB,GAAG,IAAI,CAACC,mBAAmB,GAAG,CAAC,CAAA;AACtD,QAAA,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACD,mBAAmB,GAAG,CAAC,CAAA;QACpD,OAAO,IAAI,CAACD,kBAAkB,CAAA;AAEhC,MAAA,KAAKzM,WAAW;AACd,QAAA,IAAI,CAAC4M,qBAAqB,GAAG,IAAI,CAACC,yBAAyB,GAAG,CAAC,CAAA;AAC/D,QAAA,IAAI,CAACH,mBAAmB,GAAG,IAAI,CAACE,qBAAqB,GAAGP,IAAI,CAAA;QAC5D,OAAO,IAAI,CAACO,qBAAqB,CAAA;AAEnC,MAAA,KAAK3M,iBAAiB;AACpB,QAAA,IAAI,CAAC6M,2BAA2B,GAAG,IAAI,CAAC1D,oBAAoB,GAAG,CAAC,CAAA;AAChE,QAAA,IAAI,CAACyD,yBAAyB,GAC5B,IAAI,CAACC,2BAA2B,GAAGT,IAAI,CAAA;QACzC,OAAO,IAAI,CAACS,2BAA2B,CAAA;AAEzC,MAAA,KAAK5M,YAAY;AACf,QAAA,IAAI,CAAC6M,sBAAsB,GAAG,IAAI,CAAC7E,kBAAkB,CAAA;AACrD,QAAA,IAAI,CAACkB,oBAAoB,GAAG,IAAI,CAAC2D,sBAAsB,GAAGV,IAAI,CAAA;QAC9D,OAAO,IAAI,CAACU,sBAAsB,CAAA;AAI5B,KAAA;AAEZ,GAAA;AACF;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAU,CAAChH,IAAI,EAAE;EAC/B,IAAIiH,IAAI,GAAG,CAAC,CAAA;EACZ,IAAIC,IAAI,GAAG,CAAC,CAAA;AAEZ,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnH,IAAI,CAACnD,MAAM,EAAEsK,CAAC,EAAE,EAAE;IACpCF,IAAI,GAAG,CAACA,IAAI,GAAGjH,IAAI,CAACoH,UAAU,CAACD,CAAC,CAAC,IAAI,GAAG,CAAA;AACxCD,IAAAA,IAAI,GAAG,CAACA,IAAI,GAAGD,IAAI,IAAI,GAAG,CAAA;AAC5B,GAAA;AAEA,EAAA,OAAQC,IAAI,IAAI,CAAC,GAAID,IAAI,CAAA;AAC3B;;ACZO,MAAMI,GAAG,CAAC;AACf;AACA/L,EAAAA,WAAW,GAAG;AACZ,IAAA,IAAI,CAACgM,SAAS,GAAG,IAAIC,GAAG,EAAE,CAAA;AAC5B,GAAA;EAEAhG,QAAQ,CAACV,GAAG,EAAE;IACZ,IAAI,CAAC2G,GAAG,GAAG3G,GAAG,CAACtB,OAAO,CAACrE,WAAW,CAAC,CAAA;IACnC,IAAI,CAACuM,UAAU,GAAG,IAAI,CAAA;AACxB,GAAA;;AAEA;EACAlF,YAAY,CAAC8D,IAAI,EAAE;AACjB;IACA,MAAMtE,GAAG,GAAG,CAAC,CAAA;IACb,MAAMgE,SAAS,GAAG,CAAC,CAAA;IACnB,MAAMC,OAAO,GAAGK,IAAI,CAAA;IACpB,MAAMqB,IAAI,GAAG,IAAI5B,OAAO,CAAC/D,GAAG,EAAEgE,SAAS,EAAEC,OAAO,CAAC,CAAA;IACjD,IAAI,CAACsB,SAAS,CAACnB,GAAG,CAACpE,GAAG,EAAE2F,IAAI,CAAC,CAAA;AAC7B,IAAA,OAAO3F,GAAG,CAAA;AACZ,GAAA;;AAEA;EACAE,GAAG,CAACF,GAAG,EAAE;AACP,IAAA,OAAO,IAAI,CAACuF,SAAS,CAACK,GAAG,CAAC5F,GAAG,CAAC,CAAA;AAChC,GAAA;;AAEA;EACAW,MAAM,CAACX,GAAG,EAAEqE,OAAO,EAAEC,IAAI,EAAEuB,OAAO,EAAE;IAClC,IAAIC,gBAAgB,GAAG,EAAE,CAAA;IACzB,MAAMH,IAAI,GAAG,IAAI,CAACJ,SAAS,CAACK,GAAG,CAAC5F,GAAG,CAAC,CAAA;IACpC,MAAMgE,SAAS,GAAG2B,IAAI,CAACvB,GAAG,CAACC,OAAO,EAAEC,IAAI,IAAI,CAAC,CAAC,CAAA;AAC9C,IAAA,KAAK,IAAIc,CAAC,GAAGpB,SAAS,EAAE+B,GAAG,GAAG/B,SAAS,GAAG6B,OAAO,CAAC/K,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACtE,MAAA,MAAMY,KAAK,GAAGH,OAAO,CAACT,CAAC,CAAC,CAAA;AACxB,MAAA,MAAMa,WAAW,GAAGb,CAAC,GAAG,CAAC,CAAA;AACzB,MAAA,MAAMc,YAAY,GAAG,IAAI,CAACC,OAAO,CAACF,WAAW,CAAC,CAAA;MAC9C,IAAI,CAACR,GAAG,CAAC1J,OAAO,CAACiK,KAAK,EAAEE,YAAY,CAAC,CAAA;AACrCJ,MAAAA,gBAAgB,CAACM,IAAI,CAACnB,UAAU,CAAE,CAAA,EAAEjF,GAAI,CAAA,CAAA,EAAGgG,KAAM,CAAA,CAAA,EAAGC,WAAY,CAAA,CAAC,CAAC,CAAC,CAAA;AACrE,KAAA;AACA,IAAA,OAAOH,gBAAgB,CAAA;AACzB,GAAA;;AAEA;EACAxE,SAAS,CAACM,cAAc,EAAE;AACxB,IAAA,OAAOzI,WAAW,GAAG,IAAI,CAACgN,OAAO,CAACvE,cAAc,CAAC,CAAA;AACnD,GAAA;EAEAuE,OAAO,CAACvE,cAAc,EAAE;AACtB,IAAA,OAAOA,cAAc,CAAA;AACvB,GAAA;AACF;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMyE,GAAG,CAAC;AACf;AACA9M,EAAAA,WAAW,GAAG;IACZ,IAAI,CAAC+M,WAAW,GAAG,IAAI,CAAA;;AAEvB;IACA,IAAI,CAACC,EAAE,GAAG,CACN,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAU,CAAC,MAAM,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAA8B;IACpH,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAU,CAAC,KAAK,EAAE,KAAK,CAAC,EAAU,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAA8B;IACpH,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAU,CAAC,KAAK,EAAE,KAAK,CAAC,EAAU,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAA8B;IACpH,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAU,CAAC,KAAK,EAAE,KAAK,CAAC,EAAU,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAEzF,SAAS,CAAC,CAAC;AAAI;AAC9F,IAAA,CAAC,CAAC,MAAM,CAAC,EAAiB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAA8B;AACpH,IAAA,CAAC,CAAC,MAAM,CAAC,EAAiB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAEA,SAAS,CAAC,CAAC;AAAI;IAC9F,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAU,CAAC,MAAM,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAEA,SAAS,CAAC,CAAC;KAC7F,CAAA;AACD;AACA,IAAA,IAAI,CAAC0F,EAAE,GAAG,CACN,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,CAAC,EAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE1F,SAAS,CAAC,CAAC;AAAI;AAClI,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAA6B;AACxJ,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAEA,SAAS,CAAC,CAAC;AAAI;AAClI,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAA6B;AACxJ,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAEA,SAAS,CAAC,CAAC;AAAI;AAClI,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAA6B;AACxJ,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAA6B;AACxJ,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAS,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC9H,CAAA;AACD;IACA,IAAI,CAAC2F,GAAG,GAAG;AACP;AACA,IAAA,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;KAC/D,CAAA;AACD;IACA,IAAI,CAACC,GAAG,GAAG;AACT;AACA,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAAE;AACjD,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACjD,CAAA;AACD;IACA,IAAI,CAACC,GAAG,GAAG,CACP,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAS,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAA8B;AAC5F,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAU,CAAC,KAAK,EAAE,IAAI,CAAC,EAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAA8B;AAC5F,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAU,CAAC,KAAK,EAAE,IAAI,CAAC,EAAO,CAAC,MAAM,EAAE7F,SAAS,CAAC,CAAC;AAAM;AACtE,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAU,CAAC,MAAM,EAAE,IAAI,CAAC,EAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAA8B;AAC5F,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAU,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KACjE,CAAA;AACD;IACA,IAAI,CAAC8F,IAAI,GAAG,CACR,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAe;AACxG,IAAA,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAe;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,MAAM,EAAC,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAoB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAAiB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAqB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAAmB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAAgB;AACxG,IAAA,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAe;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,MAAM,EAAC,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAoB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAAiB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAqB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAAmB;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAI,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAAgB;AACxG,IAAA,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAe;AACxG,IAAA,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAe;IACxG,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAS,CAAC,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;KAC5F,CAAA;AACD;AACA,IAAA,IAAI,CAACC,IAAI,GAAG,CACR,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAS;AACpD,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KACtC,CAAA;AACD;AACA,IAAA,IAAI,CAACC,IAAI,GAAG,CACR,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAU;IACjD,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAU;IACjD,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAU;AACjD,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;KAC1C,CAAA;AACD;AACA,IAAA,IAAI,CAACC,IAAI,GAAG,CACR,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAU;IACnD,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAU;IACnD,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAU;AACnD,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;KAC5C,CAAA;AACD;IACA,IAAI,CAACC,EAAE,GAAG;AACN;AACA,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAAW;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAM;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAM;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAAU;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAAK;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,EAAS,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAAK;IACrH,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAAO;IACrH,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAM;IACrH,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAM;IACrH,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAAK;AACrH,IAAA,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAgB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;KACnH,CAAA;AACD;IACA,IAAI,CAACC,EAAE,GAAG;AACN;IACA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAAS;AACjH,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAQ;IACjH,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAQ;AACjH,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAAO;IACjH,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAAS;AACjH,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAQ;IACjH,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAAQ;AACjH,IAAA,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;KAC7G,CAAA;AACD;IACA,IAAI,CAACC,EAAE,GAAG,CACN,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAEpG,SAAS,CAAC,CAAC;AAAS;AACzE,IAAA,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAEA,SAAS,CAAC,CAAC;AAAS;AACzE,IAAA,CAAC,CAAC,KAAK,CAAC,EAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KAC/D,CAAA;AACD;IACA,IAAI,CAACqG,GAAG,GAAG,CACP,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAAU;AACpE,IAAA,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAAS;AACpE,IAAA,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAQ,CAAC,MAAM,CAAC,EAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KAC/D,CAAA;AACH,GAAA;;EAEA1F,MAAM,CAACF,WAAW,EAAE;IAClB,IAAI,CAAC+E,WAAW,GAAG/E,WAAW,CAAA;IAC9B,OAAO;MACLA,WAAW;MACXC,UAAU,EAAE,IAAI,CAAC4F,GAAG,EAAA;KACrB,CAAA;AACH,GAAA;AAEAC,EAAAA,IAAI,GAAG;AACL,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEAC,IAAI,CAACC,KAAK,EAAE;IACV,OAAO,IAAI,CAACA,KAAK,CAAC,CAAC7F,IAAI,CAAC,IAAI,CAAC,CAAA;AAC/B,GAAA;EAEA8F,IAAI,CAACC,IAAI,EAAE;AACT,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;AAEAC,EAAAA,GAAG,CAACC,EAAE,EAAEC,EAAE,EAAE;AACV,IAAA,OAAO,CAAC,EAAED,EAAE,GAAGC,EAAE,CAAC,CAAA;AACpB,GAAA;AAEAC,EAAAA,GAAG,CAACF,EAAE,EAAEC,EAAE,EAAE;AACV,IAAA,OAAO,EAAED,EAAE,GAAGC,EAAE,CAAC,CAAA;AACnB,GAAA;AAEAE,EAAAA,IAAI,CAACH,EAAE,EAAEC,EAAE,EAAE;AACX,IAAA,IAAIG,KAAK,GAAGH,EAAE,CAACnL,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC1B,IAAA,MAAMuL,KAAK,GAAGL,EAAE,CAAC7M,MAAM,CAAA;AACvB,IAAA,OAAOiN,KAAK,CAACjN,MAAM,GAAGkN,KAAK,EAAE;MAC3BD,KAAK,GAAG,GAAG,GAAGA,KAAK,CAAA;AACrB,KAAA;IACA,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,KAAK,EAAE5C,CAAC,EAAE,EAAE;AAC9B,MAAA,MAAM6C,KAAK,GAAGN,EAAE,CAACvC,CAAC,CAAC,CAAA;AACnB,MAAA,MAAM8C,KAAK,GAAGH,KAAK,CAAC3C,CAAC,CAAC,CAAA;MACtB,IAAI6C,KAAK,KAAK,GAAG,EAAE,SAAA;AACnB,MAAA,IAAIA,KAAK,KAAKC,KAAK,EAAE,OAAO,IAAI,CAAA;AAClC,KAAA;AACA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEAC,EAAAA,IAAI,CAACR,EAAE,EAAEC,EAAE,EAAE;AACX,IAAA,IAAIG,KAAK,GAAGH,EAAE,CAACnL,QAAQ,CAAC,CAAC,CAAC,CAAA;AAC1B,IAAA,MAAMuL,KAAK,GAAGL,EAAE,CAAC7M,MAAM,CAAA;AACvB,IAAA,OAAOiN,KAAK,CAACjN,MAAM,GAAGkN,KAAK,EAAE;MAC3BD,KAAK,GAAG,GAAG,GAAGA,KAAK,CAAA;AACrB,KAAA;IACA,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4C,KAAK,EAAE5C,CAAC,EAAE,EAAE;AAC9B,MAAA,MAAM6C,KAAK,GAAGN,EAAE,CAACvC,CAAC,CAAC,CAAA;AACnB,MAAA,MAAM8C,KAAK,GAAGH,KAAK,CAAC3C,CAAC,CAAC,CAAA;MACtB,IAAI6C,KAAK,KAAK,GAAG,EAAE,SAAA;AACnB,MAAA,IAAIA,KAAK,KAAKC,KAAK,EAAE,OAAO,KAAK,CAAA;AACnC,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACAd,EAAAA,GAAG,GAAG;AACJ,IAAA,MAAMgB,IAAI,GAAI,IAAI,CAAC9B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC/D,IAAA,MAAM+B,GAAG,GAAI,IAAI,CAAC/B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAMgC,GAAG,GAAI,IAAI,CAAChC,WAAW,KAAK,CAAC,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACQ,EAAE,CAACzL,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AAClD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACO,EAAE,CAACnB,CAAC,CAAC,CAAA;MACxB,MAAM,CAACmD,SAAS,EAAEC,OAAO,CAAC,GAAGxC,KAAK,CAAC,CAAC,CAAC,CAAA;MACrC,MAAM,CAACyC,QAAQ,EAAEC,MAAM,CAAC,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAAC2C,QAAQ,EAAEC,MAAM,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACN,SAAS,CAAC,CAAC7G,IAAI,CAAC,IAAI,EAAE8G,OAAO,EAAEJ,IAAI,CAAC,EACzC,IAAI,CAACK,QAAQ,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,MAAM,EAAEL,GAAG,CAAC,EACtC,IAAI,CAACM,QAAQ,CAAC,CAACjH,IAAI,CAAC,IAAI,EAAEkH,MAAM,EAAEN,GAAG,CAAC,CACvC,CAAA;MACD,IAAIO,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;;AAEA;AACAoI,EAAAA,GAAG,GAAG;AACJ,IAAA,MAAMb,GAAG,GAAI,IAAI,CAAC/B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAMgC,GAAG,GAAI,IAAI,CAAChC,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAM6C,GAAG,GAAI,IAAI,CAAC7C,WAAW,KAAK,CAAC,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,MAAM8C,GAAG,GAAI,IAAI,CAAC9C,WAAW,KAAK,CAAC,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,MAAM+C,GAAG,GAAI,IAAI,CAAC/C,WAAW,KAAK,CAAC,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACS,EAAE,CAAC1L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AAClD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACQ,EAAE,CAACpB,CAAC,CAAC,CAAA;MACxB,MAAM,CAACqD,QAAQ,EAAEC,MAAM,CAAC,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAAC2C,QAAQ,EAAEC,MAAM,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAACsD,QAAQ,EAAEC,MAAM,CAAC,GAAGvD,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAACwD,QAAQ,EAAEC,MAAM,CAAC,GAAGzD,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAAC0D,QAAQ,EAAEC,MAAM,CAAC,GAAG3D,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACJ,QAAQ,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,MAAM,EAAEL,GAAG,CAAC,EACtC,IAAI,CAACM,QAAQ,CAAC,CAACjH,IAAI,CAAC,IAAI,EAAEkH,MAAM,EAAEN,GAAG,CAAC,EACtC,IAAI,CAACgB,QAAQ,CAAC,CAAC5H,IAAI,CAAC,IAAI,EAAE6H,MAAM,EAAEJ,GAAG,CAAC,EACtC,IAAI,CAACK,QAAQ,CAAC,CAAC9H,IAAI,CAAC,IAAI,EAAE+H,MAAM,EAAEL,GAAG,CAAC,EACtC,IAAI,CAACM,QAAQ,CAAC,CAAChI,IAAI,CAAC,IAAI,EAAEiI,MAAM,EAAEN,GAAG,CAAC,CACvC,CAAA;MACD,IAAIR,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEA8I,EAAAA,GAAG,GAAG;AACJ,IAAA,MAAMC,CAAC,GAAI,IAAI,CAACvD,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,MAAMwD,CAAC,GAAI,IAAI,CAACxD,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,MAAMyD,EAAE,GAAG,CAACF,CAAC,IAAI,CAAC,IAAIC,CAAC,CAAA;AACvB,IAAA,MAAME,EAAE,GAAI,IAAI,CAAC1D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,MAAM2D,EAAE,GAAI,IAAI,CAAC3D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,MAAM4D,EAAE,GAAI,IAAI,CAAC5D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACiB,EAAE,CAAClM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AAClD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACgB,EAAE,CAAC5B,CAAC,CAAC,CAAA;MACxB,MAAM,CAAC+E,OAAO,EAAEC,KAAK,CAAC,GAAGpE,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM,CAACqE,OAAO,EAAEC,KAAK,CAAC,GAAGtE,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM,CAACuE,OAAO,EAAEC,KAAK,CAAC,GAAGxE,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM,CAACyE,OAAO,EAAEC,KAAK,CAAC,GAAG1E,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACsB,OAAO,CAAC,CAACzI,IAAI,CAAC,IAAI,EAAE0I,KAAK,EAAEL,EAAE,CAAC,EACnC,IAAI,CAACM,OAAO,CAAC,CAAC3I,IAAI,CAAC,IAAI,EAAE4I,KAAK,EAAEN,EAAE,CAAC,EACnC,IAAI,CAACO,OAAO,CAAC,CAAC7I,IAAI,CAAC,IAAI,EAAE8I,KAAK,EAAEP,EAAE,CAAC,EACnC,IAAI,CAACQ,OAAO,CAAC,CAAC/I,IAAI,CAAC,IAAI,EAAEgJ,KAAK,EAAER,EAAE,CAAC,CACpC,CAAA;MACD,IAAIrB,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEA6J,EAAAA,GAAG,GAAG;AACJ,IAAA,MAAMC,CAAC,GAAI,IAAI,CAACtE,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,MAAM0D,EAAE,GAAI,IAAI,CAAC1D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,MAAMuE,CAAC,GAAI,IAAI,CAACvE,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,MAAM2D,EAAE,GAAI,IAAI,CAAC3D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACkB,EAAE,CAACnM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AAClD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACiB,EAAE,CAAC7B,CAAC,CAAC,CAAA;MACxB,MAAM,CAAC0F,MAAM,EAAEC,IAAI,CAAC,GAAG/E,KAAK,CAAC,CAAC,CAAC,CAAA;MAC/B,MAAM,CAACqE,OAAO,EAAEC,KAAK,CAAC,GAAGtE,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM,CAACgF,MAAM,EAAEC,IAAI,CAAC,GAAGjF,KAAK,CAAC,CAAC,CAAC,CAAA;MAC/B,MAAM,CAACuE,OAAO,EAAEC,KAAK,CAAC,GAAGxE,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACiC,MAAM,CAAC,CAACpJ,IAAI,CAAC,IAAI,EAAEqJ,IAAI,EAAEH,CAAC,CAAC,EAChC,IAAI,CAACP,OAAO,CAAC,CAAC3I,IAAI,CAAC,IAAI,EAAE4I,KAAK,EAAEN,EAAE,CAAC,EACnC,IAAI,CAACgB,MAAM,CAAC,CAACtJ,IAAI,CAAC,IAAI,EAAEuJ,IAAI,EAAEJ,CAAC,CAAC,EAChC,IAAI,CAACN,OAAO,CAAC,CAAC7I,IAAI,CAAC,IAAI,EAAE8I,KAAK,EAAEP,EAAE,CAAC,CACpC,CAAA;MACD,IAAIpB,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEAoK,EAAAA,GAAG,GAAG;AACJ,IAAA,MAAM9C,IAAI,GAAI,IAAI,CAAC9B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC/D,IAAA,MAAM+B,GAAG,GAAI,IAAI,CAAC/B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACmB,EAAE,CAACpM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AAClD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACkB,EAAE,CAAC9B,CAAC,CAAC,CAAA;MACxB,MAAM,CAACmD,SAAS,EAAEC,OAAO,CAAC,GAAGxC,KAAK,CAAC,CAAC,CAAC,CAAA;MACrC,MAAM,CAACyC,QAAQ,EAAEC,MAAM,CAAC,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACN,SAAS,CAAC,CAAC7G,IAAI,CAAC,IAAI,EAAE8G,OAAO,EAAEJ,IAAI,CAAC,EACzC,IAAI,CAACK,QAAQ,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,MAAM,EAAEL,GAAG,CAAC,CACvC,CAAA;MACD,IAAIQ,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;;AAEA;AACAqK,EAAAA,IAAI,GAAG;AACL,IAAA,MAAMC,GAAG,GAAI,IAAI,CAAC9E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAM+E,CAAC,GAAI,IAAI,CAAC/E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACU,GAAG,CAAC3L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACnD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACS,GAAG,CAACrB,CAAC,CAAC,CAAA;MACzB,MAAM,CAACkG,QAAQ,EAAEC,MAAM,CAAC,GAAGvF,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAACwF,MAAM,EAAEC,IAAI,CAAC,GAAGzF,KAAK,CAAC,CAAC,CAAC,CAAA;AAC/B,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACyC,QAAQ,CAAC,CAAC5J,IAAI,CAAC,IAAI,EAAE6J,MAAM,EAAEH,GAAG,CAAC,EACtC,IAAI,CAACI,MAAM,CAAC,CAAC9J,IAAI,CAAC,IAAI,EAAE+J,IAAI,EAAEJ,CAAC,CAAC,CACjC,CAAA;MACD,IAAIxC,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEA4K,EAAAA,IAAI,GAAG;AACL,IAAA,MAAMrD,GAAG,GAAI,IAAI,CAAC/B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAMgC,GAAG,GAAI,IAAI,CAAChC,WAAW,KAAK,CAAC,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACW,GAAG,CAAC5L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACnD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACU,GAAG,CAACtB,CAAC,CAAC,CAAA;MACzB,MAAM,CAACqD,QAAQ,EAAEC,MAAM,CAAC,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAAC2C,QAAQ,EAAEC,MAAM,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACJ,QAAQ,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,MAAM,EAAEL,GAAG,CAAC,EACtC,IAAI,CAACM,QAAQ,CAAC,CAACjH,IAAI,CAAC,IAAI,EAAEkH,MAAM,EAAEN,GAAG,CAAC,CACvC,CAAA;MACD,IAAIO,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEA6K,EAAAA,IAAI,GAAG;AACL,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEAC,EAAAA,IAAI,GAAG;AACL,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEAC,EAAAA,IAAI,GAAG;AACL,IAAA,MAAMxD,GAAG,GAAI,IAAI,CAAC/B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAMgC,GAAG,GAAI,IAAI,CAAChC,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACY,GAAG,CAAC7L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACnD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACW,GAAG,CAACvB,CAAC,CAAC,CAAA;MACzB,MAAM,CAACqD,QAAQ,EAAEC,MAAM,CAAC,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAAC2C,QAAQ,EAAEC,MAAM,CAAC,GAAG5C,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACJ,QAAQ,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,MAAM,EAAEL,GAAG,CAAC,EACtC,IAAI,CAACM,QAAQ,CAAC,CAACjH,IAAI,CAAC,IAAI,EAAEkH,MAAM,EAAEN,GAAG,CAAC,CACvC,CAAA;MACD,IAAIO,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;;AAEA;AACAgL,EAAAA,KAAK,GAAG;AACN,IAAA,MAAMV,GAAG,GAAI,IAAI,CAAC9E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,MAAM+E,CAAC,GAAI,IAAI,CAAC/E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,MAAM4D,EAAE,GAAI,IAAI,CAAC5D,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC7D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACa,IAAI,CAAC9L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACpD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACY,IAAI,CAACxB,CAAC,CAAC,CAAA;MAC1B,MAAM,CAACkG,QAAQ,EAAEC,MAAM,CAAC,GAAGvF,KAAK,CAAC,CAAC,CAAC,CAAA;MACnC,MAAM,CAACwF,MAAM,EAAEC,IAAI,CAAC,GAAGzF,KAAK,CAAC,CAAC,CAAC,CAAA;MAC/B,MAAM,CAACyE,OAAO,EAAEC,KAAK,CAAC,GAAG1E,KAAK,CAAC,CAAC,CAAC,CAAA;MACjC,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACyC,QAAQ,CAAC,CAAC5J,IAAI,CAAC,IAAI,EAAE6J,MAAM,EAAEH,GAAG,CAAC,EACtC,IAAI,CAACI,MAAM,CAAC,CAAC9J,IAAI,CAAC,IAAI,EAAE+J,IAAI,EAAEJ,CAAC,CAAC,EAChC,IAAI,CAACZ,OAAO,CAAC,CAAC/I,IAAI,CAAC,IAAI,EAAEgJ,KAAK,EAAER,EAAE,CAAC,CACpC,CAAA;MACD,IAAIrB,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEAiL,EAAAA,KAAK,GAAG;AACN,IAAA,MAAMC,CAAC,GAAI,IAAI,CAAC1F,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACc,IAAI,CAAC/L,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACpD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACa,IAAI,CAACzB,CAAC,CAAC,CAAA;MAC1B,MAAM,CAAC6G,MAAM,EAAEC,IAAI,CAAC,GAAGlG,KAAK,CAAC,CAAC,CAAC,CAAA;AAC/B,MAAA,MAAM6C,MAAM,GAAG,CAAC,IAAI,CAACoD,MAAM,CAAC,CAACvK,IAAI,CAAC,IAAI,EAAEwK,IAAI,EAAEF,CAAC,CAAC,CAAC,CAAA;MACjD,IAAInD,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEAqL,EAAAA,KAAK,GAAG;AACN,IAAA,MAAMf,GAAG,GAAI,IAAI,CAAC9E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACe,IAAI,CAAChM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACpD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACc,IAAI,CAAC1B,CAAC,CAAC,CAAA;MAC1B,MAAM,CAACkG,QAAQ,EAAEC,MAAM,CAAC,GAAGvF,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CAAC,IAAI,CAACyC,QAAQ,CAAC,CAAC5J,IAAI,CAAC,IAAI,EAAE6J,MAAM,EAAEH,GAAG,CAAC,CAAC,CAAA;MACvD,IAAIvC,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AAEAsL,EAAAA,KAAK,GAAG;AACN,IAAA,MAAMhB,GAAG,GAAI,IAAI,CAAC9E,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC9D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACgB,IAAI,CAACjM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACpD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACe,IAAI,CAAC3B,CAAC,CAAC,CAAA;MAC1B,MAAM,CAACkG,QAAQ,EAAEC,MAAM,CAAC,GAAGvF,KAAK,CAAC,CAAC,CAAC,CAAA;AACnC,MAAA,MAAM6C,MAAM,GAAG,CAAC,IAAI,CAACyC,QAAQ,CAAC,CAAC5J,IAAI,CAAC,IAAI,EAAE6J,MAAM,EAAEH,GAAG,CAAC,CAAC,CAAA;MACvD,IAAIvC,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;;AAEA;AACAuL,EAAAA,IAAI,GAAG;AACL,IAAA,MAAMjE,IAAI,GAAI,IAAI,CAAC9B,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC/D,IAAA,MAAM0F,CAAC,GAAI,IAAI,CAAC1F,WAAW,KAAK,EAAE,GAAK,CAAE,CAAC,IAAI,CAAC,KAAM,CAAC,IAAI,CAAE,CAAA;AAC5D,IAAA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEW,GAAG,GAAG,IAAI,CAACoB,GAAG,CAACrM,MAAM,EAAEsK,CAAC,GAAGW,GAAG,EAAEX,CAAC,EAAE,EAAE;AACnD,MAAA,MAAMY,KAAK,GAAG,IAAI,CAACmB,GAAG,CAAC/B,CAAC,CAAC,CAAA;MACzB,MAAM,CAACmD,SAAS,EAAEC,OAAO,CAAC,GAAGxC,KAAK,CAAC,CAAC,CAAC,CAAA;MACrC,MAAM,CAACiG,MAAM,EAAEC,IAAI,CAAC,GAAGlG,KAAK,CAAC,CAAC,CAAC,CAAA;AAC/B,MAAA,MAAM6C,MAAM,GAAG,CACb,IAAI,CAACN,SAAS,CAAC,CAAC7G,IAAI,CAAC,IAAI,EAAE8G,OAAO,EAAEJ,IAAI,CAAC,EACzC,IAAI,CAAC6D,MAAM,CAAC,CAACvK,IAAI,CAAC,IAAI,EAAEwK,IAAI,EAAEF,CAAC,CAAC,CACjC,CAAA;MACD,IAAInD,MAAM,CAACC,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAAC,EAAE;QAC1B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGjD,KAAK,CAAC6C,MAAM,CAAC/N,MAAM,CAAC,CAAA;QAC7C,OAAO,IAAI,CAACkO,MAAM,CAAC,CAACtH,IAAI,CAAC,IAAI,EAAEuH,MAAM,CAAC,CAAA;AACxC,OAAA;AACF,KAAA;AACA,IAAA,OAAOnI,SAAS,CAAA;AAClB,GAAA;AACF;;AC5hBO,MAAMwL,GAAG,SAAShT,WAAW,CAAC;AACnCC,EAAAA,WAAW,GAAG;AACZ,IAAA,KAAK,EAAE,CAAA;AACT,GAAA;EAEAkG,QAAQ,CAACT,GAAG,EAAE;IACZ,IAAI,CAACD,GAAG,GAAGC,GAAG,CAAA;AAChB,GAAA;AAEA0C,EAAAA,IAAI,CAAC;IAAE1B,GAAG;IAAE2B,OAAO;IAAEJ,WAAW;AAAEK,IAAAA,cAAAA;AAAe,GAAC,EAAE;AAClD,IAAA,IAAID,OAAO,EAAE;AACXtD,MAAAA,OAAO,CAACC,GAAG,CACR,oBAAmBqD,OAAO,CAAClF,QAAQ,CAAC,CAAC,CAAE,CAAA,GAAA,EAAK8E,WAAW,CAAC9E,QAAQ,CAC/D,EAAE,CACF,MAAK,CACR,CAAA;AACD,MAAA,MAAMuC,GAAG,GACP,IAAI,CAACD,GAAG,CACN,CACE,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,MAAM,CACP,CACCwN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIF,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,GAAGD,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAC7DH,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,CACf,CACF,CAAA;AACH1N,MAAAA,GAAG,CAAC7B,KAAK,CAACoE,WAAW,CAAC,CAAA;AACtB,MAAA,IAAI,CAACtH,aAAa,CAChB,IAAIW,WAAW,CAAC/C,cAAc,EAAE;AAC9BgD,QAAAA,MAAM,EAAE;UACNmF,GAAG;UACHuB,WAAW;UACXK,cAAc;UACd+K,QAAQ,EAAE1H,UAAU,CAAE,CAAA,EAAEjF,GAAI,CAAGuB,CAAAA,EAAAA,WAAY,CAAGK,CAAAA,EAAAA,cAAe,CAAC,CAAA,CAAA;AAChE,SAAA;AACF,OAAC,CAAC,CACH,CAAA;AACH,KAAC,MAAM;AACLvD,MAAAA,OAAO,CAACC,GAAG,CACR,CAAA,eAAA,EAAiBiD,WAAW,CAAC9E,QAAQ,CAAC,EAAE,CAAE,CAAK,IAAA,CAAA,EAChD,iCAAiC,CAClC,CAAA;AACH,KAAA;AACF,GAAA;AACF;;AChDA,MAAMmQ,GAAG,GAAG,IAAI7R,GAAG,GAAE;AACrB,MAAMiE,GAAG,GAAG,IAAI6C,GAAG,GAAE;AACrB,MAAM3C,GAAG,GAAG,IAAIoG,GAAG,GAAE;AACrB,MAAM1G,GAAG,GAAG,IAAIyH,GAAG,GAAE;AACrB,MAAM3H,GAAG,GAAG,IAAI4N,GAAG,GAAE;AACrB,MAAMlN,GAAG,GAAG,IAAI/F,GAAG,GAAE;AAErB,MAAMyF,GAAG,GAAG,IAAIxB,GAAG,CAAC;EAAE,CAACuP,WAAe,GAAGD,GAAAA;AAAI,CAAC,EAAC;AAC/C,MAAME,GAAG,GAAG,IAAIvO,GAAG,CAAC;EAAEO,GAAG;EAAEE,GAAG;EAAEE,GAAG;EAAEN,GAAG;EAAEF,GAAG;EAAEU,GAAG;AAAEwN,EAAAA,GAAAA;AAAI,CAAC;;;;"}